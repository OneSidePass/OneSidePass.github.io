<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Pixiv排行榜抓取</title>
      <link href="/posts/44706.html"/>
      <url>/posts/44706.html</url>
      
        <content type="html"><![CDATA[<h2 id="Pixiv图片爬取（python实现）"><a href="#Pixiv图片爬取（python实现）" class="headerlink" title="Pixiv图片爬取（python实现）"></a>Pixiv图片爬取（python实现）</h2><p>源码的下载如下： </p><p><a href="https://github.com/OneSidePass/Pixiv_get" target="_blank" rel="noopener">github仓库地址</a><br><a href="https://wwa.lanzous.com/ivPwZkwctjc" target="_blank" rel="noopener">压缩包下载</a></p><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>里面有三个文件，分别是：<br><strong>#1.爬虫程序</strong><br>Pixiv_get.py<br><strong>#2.自建代理ip池</strong><br>ip_pool_foreign.txt<br><strong>#3.爬取某网站国外ip</strong><br>ip_pool_foreign.py  </p><p>这边展开爬虫程序代码方便查阅：  </p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> re<span class="token function">import</span> requestsfrom fake_useragent <span class="token function">import</span> UserAgent<span class="token function">import</span> random<span class="token function">import</span> os<span class="token function">import</span> <span class="token function">time</span>from itertools <span class="token function">import</span> productheaders <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'authority'</span><span class="token keyword">:</span> <span class="token string">'www.pixiv.net'</span>,            <span class="token string">'sec-ch-ua'</span><span class="token keyword">:</span> <span class="token string">'"Google Chrome";v="87", " Not;A Brand";v="99", "Chromium";v="87"'</span>,            <span class="token string">'accept'</span><span class="token keyword">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span>,            <span class="token string">'x-requested-with'</span><span class="token keyword">:</span> <span class="token string">'XMLHttpRequest'</span>,            <span class="token string">'sec-ch-ua-mobile'</span><span class="token keyword">:</span> <span class="token string">'?0'</span>,            <span class="token string">'user-agent'</span><span class="token keyword">:</span> UserAgent<span class="token punctuation">(</span>verify_ssl<span class="token operator">=</span>False<span class="token punctuation">)</span>.random,            <span class="token string">'sec-fetch-site'</span><span class="token keyword">:</span> <span class="token string">'same-origin'</span>,            <span class="token string">'sec-fetch-mode'</span><span class="token keyword">:</span> <span class="token string">'cors'</span>,            <span class="token string">'sec-fetch-dest'</span><span class="token keyword">:</span> <span class="token string">'empty'</span>,            <span class="token string">'referer'</span><span class="token keyword">:</span> <span class="token string">'https://www.pixiv.net/ranking.php?mode=daily&amp;content=illust'</span>,  <span class="token comment" spellcheck="true"># 防盗链</span>            <span class="token string">'accept-language'</span><span class="token keyword">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span>,            <span class="token comment" spellcheck="true"># 'referer':'https://www.pixiv.net/artworks/87255676',  # 防盗链</span>            <span class="token string">'cookie'</span><span class="token keyword">:</span> <span class="token string">'first_visit_datetime_pc=2021-01-25+17%3A52%3A04; p_ab_id=2; p_ab_id_2=7; p_ab_d_id=1222487481; yuid_b=GCWEdSA; __cfduid=d4e70456039de82435bf2d68ec263371a1611638726; __utmz=235335808.1611638731.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); _ga=GA1.2.592285702.1611638731; _gid=GA1.2.1754984064.1611638789; device_token=073c94a0dec1fe7a566be55ad2ff83ab; c_type=19; a_type=0; b_type=1; ki_r=; login_ever=yes; __utmc=235335808; ki_s=; __utma=235335808.592285702.1611638731.1611657616.1611664200.4; PHPSESSID=49568357_wQL7nOLgxtsC5sKbz0oVTLarRNmNLqIN; privacy_policy_agreement=2; __utmv=235335808.|2=login%20ever=yes=1^3=plan=normal=1^5=gender=male=1^6=user_id=49568357=1^9=p_ab_id=2=1^10=p_ab_id_2=7=1^11=lang=zh=1; tag_view_ranking=OT4SuGenFI~kP7msdIeEU~18NCcMsHl5~jaqkarpwly~bXMh6mBhl8~n87ZpuRDS3~HY55MqmzzQ~lH5YZxnbfC~reR7DUAWuG~kGYw4gQ11Z~gpglyfLkWs~HLWLeyYOUF~azESOjmQSV~RTJMXD26Ak~Lt-oEicbBr~oYAm9klH0r~PTyxATIsK0~tK1rVKwWT5~y489EcSQ8H~fq5m22wNFl~jH0uD88V6F~2bq8SNVWly~j7DYHEocqe~SY1hWzTBSP~SVRsxOS1dp~tO5Om4-52p~rsKgvIMw_U~JdNgKFcAjN~eErTeDrRV4~Js5EBY4gOW~PRLZzOBnry~tr4jG_N1yz~gUIg7nrQgl~RcahSSzeRf~sFPxX8lk4q~aKhT3n4RHZ~D0nMcn6oGk~-StjcwdYwv~jk9IzfjZ6n~92z8RZmGQ6; ki_t=1611638990330%3B1611638990330%3B1611670576819%3B1%3B19; tags_sended=1; categorized_tags=CADCYLsad0~IVwLyT8B6k~RcahSSzeRf~RsIQe1tAR0~bXMh6mBhl8~kP7msdIeEU~mt-cXqHhAM; __utmt=1; __cf_bm=be3692187df7cf718e1bfbf11a7d31dc0bf00119-1611678056-1800-AZLiFR3QWIpm9kfIjrOFBX3QG0ssT9659X5pB2xMSU4rl9EHln8qreQAsZ2AP3dRcGQxXsk/iMiOsWhUo4icbqymA3a+doquASmZ15aASNA4bQjiOg5Yqwsl609jbxlT9Y8DBPKulySuu9qjIGlTP6ciriwisEducqbMO9OPFeDC; __utmb=235335808.77.9.1611678055106'</span>,            <span class="token comment" spellcheck="true"># 此处需替换成真实的，换成你自己的cookie</span>        <span class="token punctuation">}</span>class Pixiv_DownLoad<span class="token punctuation">(</span><span class="token punctuation">)</span>:    def get_proxy<span class="token punctuation">(</span>self<span class="token punctuation">)</span>:        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 读取代理池ip并随机返回一个</span>        with open<span class="token punctuation">(</span><span class="token string">'ip_pool_foreign.txt'</span>, <span class="token string">'r'</span><span class="token punctuation">)</span> as f:            <span class="token keyword">for</span> line <span class="token keyword">in</span> f:                result.append<span class="token punctuation">(</span>line.strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">))</span>        ips <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>None, result<span class="token punctuation">))</span>        proxies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'http'</span><span class="token keyword">:</span> random.choice<span class="token punctuation">(</span>ips<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> proxies    def illust_id<span class="token punctuation">(</span>self,p<span class="token punctuation">)</span>:        global headers        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'mode'</span><span class="token keyword">:</span> <span class="token string">'daily'</span>,            <span class="token string">'content'</span><span class="token keyword">:</span> <span class="token string">'illust'</span>,            <span class="token string">'p'</span><span class="token keyword">:</span> p,            <span class="token string">'format'</span><span class="token keyword">:</span> <span class="token string">'json'</span>,        <span class="token punctuation">}</span>        url <span class="token operator">=</span> <span class="token string">'https://www.pixiv.net/ranking.php'</span>  <span class="token comment" spellcheck="true"># pixiv插画排行榜url</span>        totals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        proxies <span class="token operator">=</span> self.get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>        headers<span class="token punctuation">[</span><span class="token string">'referer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'https://www.pixiv.net/ranking.php?mode=daily&amp;content=illust'</span>        try:            response <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span>url,headers<span class="token operator">=</span>headers,params<span class="token operator">=</span>params,proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>.json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>50<span class="token punctuation">)</span>:                try:                    target <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'contents'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                    ex <span class="token operator">=</span> <span class="token string">'https://i.pximg.net/c/240x480/img-master/img(.*?)_p0'</span>  <span class="token comment" spellcheck="true"># ex 皆为正则的格式</span>                    final <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>ex, target<span class="token punctuation">)</span>                    middle <span class="token operator">=</span> final<span class="token punctuation">[</span>0<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># middle 为中间变量随便取的</span>                    ex2 <span class="token operator">=</span> <span class="token string">'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'</span>                    name <span class="token operator">=</span> re.search<span class="token punctuation">(</span>ex2, middle<span class="token punctuation">)</span>.group<span class="token punctuation">(</span>0<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用正则提取出pixivID</span>                    final_url <span class="token operator">=</span> f<span class="token string">"https://i.pximg.net/img-master/img{final[0]}_p0_master1200.jpg"</span> <span class="token comment" spellcheck="true"># 拼接url</span>                    m <span class="token operator">=</span> <span class="token punctuation">(</span>final_url,name<span class="token punctuation">)</span>                    totals.append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>                except IndexError:                    print<span class="token punctuation">(</span><span class="token string">'爬取已完成'</span><span class="token punctuation">)</span>        except:            proxies <span class="token operator">=</span> self.get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>            response <span class="token operator">=</span> requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span>url, headers<span class="token operator">=</span>headers, params<span class="token operator">=</span>params, proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>.json<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>50<span class="token punctuation">)</span>:                try:                    target <span class="token operator">=</span> response<span class="token punctuation">[</span><span class="token string">'contents'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>                    ex <span class="token operator">=</span> <span class="token string">'https://i.pximg.net/c/240x480/img-master/img(.*?)_p0'</span>  <span class="token comment" spellcheck="true"># ex 皆为正则的格式</span>                    final <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>ex, target<span class="token punctuation">)</span>                    middle <span class="token operator">=</span> final<span class="token punctuation">[</span>0<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># middle 为中间变量随便取的</span>                    ex2 <span class="token operator">=</span> <span class="token string">'[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'</span>                    name <span class="token operator">=</span> re.search<span class="token punctuation">(</span>ex2, middle<span class="token punctuation">)</span>.group<span class="token punctuation">(</span>0<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用正则提取出pixivID</span>                    final_url <span class="token operator">=</span> f<span class="token string">"https://i.pximg.net/img-master/img{final[0]}_p0_master1200.jpg"</span>  <span class="token comment" spellcheck="true"># 拼接url</span>                    m <span class="token operator">=</span> <span class="token punctuation">(</span>final_url, name<span class="token punctuation">)</span>                    totals.append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>                except IndexError:                    print<span class="token punctuation">(</span><span class="token string">'爬取已完成'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> totals <span class="token comment" spellcheck="true">#返回最终图片url，以及pixivID</span>    def img_download<span class="token punctuation">(</span>self,target_url,name<span class="token punctuation">)</span>:        global headers        path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span> + <span class="token string">"\\\\pic_downloaded"</span><span class="token punctuation">)</span>:            os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span> + <span class="token string">"\\\\pic_downloaded"</span><span class="token punctuation">)</span>        file_path <span class="token operator">=</span> f<span class="token string">"{path}"</span> + f<span class="token string">"\\pic_downloaded\\{name}.jpg"</span>        with open<span class="token punctuation">(</span>file_path, <span class="token string">'wb+'</span><span class="token punctuation">)</span> as f:            try:                proxies <span class="token operator">=</span> self.get_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>                headers<span class="token punctuation">[</span><span class="token string">'referer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token string">'https://www.pixiv.net/artworks/{name}'</span>                f.write<span class="token punctuation">(</span>requests.get<span class="token punctuation">(</span>url<span class="token operator">=</span>target_url,headers<span class="token operator">=</span>headers,proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>.content<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># time.sleep(random.randint(2,5))</span>                print<span class="token punctuation">(</span><span class="token string">'成功下载图片：{}.jpg'</span>.format<span class="token punctuation">(</span>name<span class="token punctuation">))</span>            except Exception:                print<span class="token punctuation">(</span><span class="token string">'成功下载图片：{}.jpg'</span>.format<span class="token punctuation">(</span>name<span class="token punctuation">))</span>download <span class="token operator">=</span> Pixiv_DownLoad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span>1, 12<span class="token punctuation">)</span>:   <span class="token comment" spellcheck="true"># 可以修改这里 p 的循环范围（每50张一个p）</span>    try:        total <span class="token operator">=</span> download.illust_id<span class="token punctuation">(</span>p<span class="token operator">=</span>p<span class="token punctuation">)</span>        time.sleep<span class="token punctuation">(</span>random.randint<span class="token punctuation">(</span>10, 20<span class="token punctuation">))</span>  <span class="token comment" spellcheck="true"># 随机等待时间</span>        <span class="token keyword">for</span> target_url,name <span class="token keyword">in</span> total:            download.img_download<span class="token punctuation">(</span>target_url,name<span class="token punctuation">)</span>    except IndexError:        print<span class="token punctuation">(</span><span class="token string">'所有图片已爬取完成'</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span>f<span class="token string">'循环到第{p}页了哦！'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># p为页码位置，如中途中断可自行修改for循环中的p的范围（左闭右开）</span></code></pre><hr><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li><p>这边需要注意的是因为P站需要登录才能访问，所以<strong>需要手动修改<code>headers</code>里的<code>cookie</code>值</strong><br>cookie值从网站中获取，F12进入控制台<br><img src="http://fp1.fghrsh.net/2021/01/27/bf8073df62839c26d10055390097bd5f.png" alt=""><br><img src="http://fp1.fghrsh.net/2021/01/27/e6fd8ca58715c5ae4b1f9e67c209641e.png" alt="">  </p></li><li><p>tips: 复制cookie冒号后面的内容至headers里cookie的相对应键值（注意单引号）（复制进单引号内）   </p></li><li><p>如果爬取中断可尝试更改代码末尾for循环内的p的范围实现断点续爬  </p></li><li><p><strong>还有一点是需要挂代理来爬取的（VPN）</strong>，没尝试过反代来访问，可自行尝试</p></li><li><p>还有就是代理ip池的.txt文件需要同爬虫程序处于相同目录<br>目前只支持在win环境下使用  </p></li></ul><h3 id="Finally（目标-："><a href="#Finally（目标-：" class="headerlink" title="Finally（目标)："></a>Finally（目标)：</h3><ul><li>后面会尝试实现多线程（异步线程之类的）来提高爬取速度</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Pixiv爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sayobot</title>
      <link href="/posts/41831.html"/>
      <url>/posts/41831.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sayobot："><a href="#Sayobot：" class="headerlink" title="Sayobot："></a>Sayobot：</h1><h2 id="基于python实现前端go-cqhttp实现后端的聊天机器人"><a href="#基于python实现前端go-cqhttp实现后端的聊天机器人" class="headerlink" title="基于python实现前端go-cqhttp实现后端的聊天机器人"></a>基于<code>python</code>实现前端<code>go-cqhttp</code>实现后端的聊天机器人</h2><hr><h2 id="使用-NoneBot-和-go-cqhttp-搭建-QQ-群聊机器人"><a href="#使用-NoneBot-和-go-cqhttp-搭建-QQ-群聊机器人" class="headerlink" title="使用 NoneBot 和 go-cqhttp 搭建 QQ 群聊机器人"></a>使用 <code>NoneBot</code> 和 <code>go-cqhttp</code> 搭建 QQ 群聊机器人</h2><p>原先 NoneBot 的文档过于老旧，有些内容可能没有参考价值。例如官方 README 中节选：</p><p>NoneBot 是一个基于 酷Q 的 Python 异步 QQ 机器人框架，它会对 QQ 机器人收到的消息进行解析和处理，并以插件化的形式，分发给消息所对应的命令处理器和自然语言处理器，来完成具体的功能。<br>除了起到解析消息的作用，NoneBot 还为插件提供了大量实用的预设操作和权限控制机制，尤其对于命令处理器，它更是提供了完善且易用的会话机制和内部调用机制，以分别适应命令的连续交互和插件内部功能复用等需求。<br>这里的 酷Q 早就在八月就凉了。新手看到后可能会觉得一头雾水。于是本文的目的即是演示从零搭建一个 QQ 机器人，读完后或许可以消除新人的疑惑。  </p><hr><ul><li><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2>前提：本人使用的<code>IDE</code>为<code>pycharm</code>，这里推荐一个万用的代码编辑器<code>VSCode</code>，可以先<a href="https://wwa.lanzous.com/iDUX4kors6f" target="_blank" rel="noopener">下载</a>下来使用</li></ul><p>首先先搭建好python环境，这里可以从我的蓝奏云<a href="https://wwa.lanzous.com/iESSGkorroh" target="_blank" rel="noopener">下载</a>3.9的python（注意这里的python是win_64bit版）MacOS可以自行到<a href="https://www.python.org/doc/" target="_blank" rel="noopener">官网</a>下。<br>下载好后执行安装，注意勾选上下面的Add Path 这里很重要，自动帮你配置好环境变量<br><img src="https://s3.ax1x.com/2021/01/22/sI8PiQ.png" alt=""><br>无脑下一步安装即可，这里就不进行演示了  </p><ul><li>文件的大致结构如下：<pre><code>sayobot/└── Sayo/  ├── bot.py         # bot.py 实例化bot  ├── bot_config.py  # bot_config.py bot配置  ├── services/      # services为插件提供支持和服务  ├── sources/       # sources暂时存放数据  └── bot_plugins/   # bot_plugins存放插件      ├── ping.py        ├── jrrp.py        └── weather.py</code></pre><h3 id="这里可以从我的github上download-Sayo-源文件"><a href="#这里可以从我的github上download-Sayo-源文件" class="headerlink" title="这里可以从我的github上download Sayo 源文件"></a><strong>这里可以从我的github上<a href="https://github.com/OneSidePass/Sayobot_2333" target="_blank" rel="noopener">download</a> <code>Sayo</code> 源文件</strong></h3>此时你只需要配置的是 Sayo/bot_config.py 里的SUPERUSERS = {xxxxxx}（这里就是机器人主人的QQ号）以及<strong>配置好go—cqhttp</strong>就完成了第一步的配置<br>这里配置go—cqhttp我另外写了一篇文章：<a href="https://osp2333.xyz/posts/24122.html" target="_blank" rel="noopener">https://osp2333.xyz/posts/24122.html</a>  </li></ul><hr><ul><li><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2>需要安装的模块： (在命令行中安装python包)<br><img src="https://s3.ax1x.com/2021/01/22/sINFKA.png" alt=""><br>首先使用 <code>pip</code> 安装 <code>nonebot</code> （截至此稿完成最新版本为 1.8.0）：  <pre><code>$ pip install nonebot  </code></pre>因为要获取天气，我们要请求 API，所以需要合适的库来提我们做 HTTP 请求。在开始之前，先引入如下 pip 包：<pre><code>$ pip install httpx aiocache </code></pre>还有很多：  <pre><code>$ pip install jieba$ pip install requests$ pip install bs4$ pip install datetime$ pip install pytz</code></pre></li></ul><p>安装完这些支持包后就可以运行机器人的前端了<br>打开cmd命令cd 到目标目录后执行：<code>python bot.py</code> 回车  </p><pre><code> $ cd Sayo &amp;&amp; python bot.pyujson module not found, using jsonmsgpack not installed, MsgPackSerializer unavailable[2020-11-11 02:47:36,123 nonebot] INFO: Succeeded to import &quot;bot_plugins.ping&quot;[2020-11-11 02:47:36,124 nonebot] INFO: Running on 127.0.0.1:8765Running on http://127.0.0.1:8765 (CTRL + C to quit)[2020-11-11 02:47:36,209] Running on http://127.0.0.1:8765 (CTRL + C to quit)</code></pre><p> 忽略报错，操作示例：<br> <img src="https://s3.ax1x.com/2021/01/22/sId1rd.png" alt=""><br> 这样同时运行前端sayobot以及后端go-cqhttp就完成了（通过同一个地址以及端口进行通信）<br> 验证：<br> <img src="https://s3.ax1x.com/2021/01/22/sI0Atx.png" alt=""></p><h4 id="·-最后还需要一台云主机用相同的流程部署到云端实现24小时运作"><a href="#·-最后还需要一台云主机用相同的流程部署到云端实现24小时运作" class="headerlink" title="· 最后还需要一台云主机用相同的流程部署到云端实现24小时运作"></a>· 最后还需要一台云主机用相同的流程部署到云端实现24小时运作</h4><h4 id="·-相关帮助文档："><a href="#·-相关帮助文档：" class="headerlink" title="· 相关帮助文档："></a>· 相关帮助文档：</h4><p><a href="https://docs.nonebot.dev/api.html#message-t" target="_blank" rel="noopener"><code>1.NoneBot_API</code></a><br><a href="https://github.com/howmanybots/onebot/blob/master/v11/specs/api/public.md" target="_blank" rel="noopener"><code>2.onebot_api</code></a>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> QQ_bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-cqhttp</title>
      <link href="/posts/24122.html"/>
      <url>/posts/24122.html</url>
      
        <content type="html"><![CDATA[<h1 id="go-cqhttp-（非常强大的’虚拟’客户端）"><a href="#go-cqhttp-（非常强大的’虚拟’客户端）" class="headerlink" title="go-cqhttp （非常强大的’虚拟’客户端）"></a>go-cqhttp <strong>（非常强大的’虚拟’客户端）</strong></h1><h2 id="两种方法实现"><a href="#两种方法实现" class="headerlink" title="两种方法实现"></a>两种方法实现</h2><p>第一种方法需要在 Sayo 下创建 gocqhttp 文件夹，到其<a href="https://github.com/Mrs4s/go-cqhttp/releases" target="_blank" rel="noopener"> <code>release</code> </a>页面里下载适合自己平台的可执行文件并且解压到到此文件夹中（至截稿版本为 v0.9.38-fix1 ，若因版本更新导致配置文件格式变化，请参照与其默认配置不同处）。在相同的目录下创建 <code>go-cqhttp</code> 的配置文件，如下：<br><code>Sayobot/gocqhttp/config.json</code>: (放置于 Sayo 同级目录即可)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"uin"</span><span class="token keyword">:</span> 11111111,  <span class="token string">"password"</span><span class="token keyword">:</span> <span class="token string">"123456"</span>,  <span class="token string">"encrypt_password"</span><span class="token keyword">:</span> false,  <span class="token string">"password_encrypted"</span><span class="token keyword">:</span> <span class="token string">""</span>,  <span class="token string">"enable_db"</span><span class="token keyword">:</span> true,  <span class="token string">"access_token"</span><span class="token keyword">:</span> <span class="token string">""</span>,  <span class="token string">"relogin"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"enabled"</span><span class="token keyword">:</span> true,    <span class="token string">"relogin_delay"</span><span class="token keyword">:</span> 3,    <span class="token string">"max_relogin_times"</span><span class="token keyword">:</span> 0  <span class="token punctuation">}</span>,  <span class="token string">"_rate_limit"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"enabled"</span><span class="token keyword">:</span> false,    <span class="token string">"frequency"</span><span class="token keyword">:</span> 1,    <span class="token string">"bucket_size"</span><span class="token keyword">:</span> 1  <span class="token punctuation">}</span>,  <span class="token string">"ignore_invalid_cqcode"</span><span class="token keyword">:</span> false,  <span class="token string">"force_fragmented"</span><span class="token keyword">:</span> false,  <span class="token string">"heartbeat_interval"</span><span class="token keyword">:</span> 10,  <span class="token string">"http_config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"enabled"</span><span class="token keyword">:</span> false,    <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"0.0.0.0"</span>,    <span class="token string">"port"</span><span class="token keyword">:</span> 5700,    <span class="token string">"timeout"</span><span class="token keyword">:</span> 0,    <span class="token string">"post_urls"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"ws_config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"enabled"</span><span class="token keyword">:</span> false,    <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"0.0.0.0"</span>,    <span class="token string">"port"</span><span class="token keyword">:</span> 6700  <span class="token punctuation">}</span>,  <span class="token string">"ws_reverse_servers"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"enabled"</span><span class="token keyword">:</span> true,      <span class="token string">"reverse_url"</span><span class="token keyword">:</span> <span class="token string">"ws://127.0.0.1:8765/ws"</span>,      <span class="token string">"reverse_api_url"</span><span class="token keyword">:</span> <span class="token string">""</span>,      <span class="token string">"reverse_event_url"</span><span class="token keyword">:</span> <span class="token string">""</span>,      <span class="token string">"reverse_reconnect_interval"</span><span class="token keyword">:</span> 3000    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>,  <span class="token string">"post_message_format"</span><span class="token keyword">:</span> <span class="token string">"string"</span>,  <span class="token string">"debug"</span><span class="token keyword">:</span> false,  <span class="token string">"log_level"</span><span class="token keyword">:</span> <span class="token string">""</span>,  <span class="token string">"web_ui"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"enabled"</span><span class="token keyword">:</span> false,    <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"0.0.0.0"</span>,    <span class="token string">"web_ui_port"</span><span class="token keyword">:</span> 9999,    <span class="token string">"web_input"</span><span class="token keyword">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这里前两个配置（”uin”, “password”）是机器人登录 QQ 号和密码。  </p><p><strong>由于 nonebot 只通过开启 websocket 服务器来和后端沟通，所以在这里的配置文件中我们关闭 http 和正向 ws，只保留反向 ws （即 “ws_reverse_servers”）。请保证 “reverse_url” 的配置与 Sayobot/Sayo/bot_config.py 中的 IP 和端口一致。</strong></p><p>第二种方法就是直接到蓝奏云下载go-cqhttp，放于bot前端文件同级目录（即与 Sayo 同级目录），同样的配置好机器人登录 QQ 号和密码。</p><p>1.<a href="https://github.com/Mrs4s/go-cqhttp/releases" target="_blank" rel="noopener">releases</a>  </p><p>2.<a href="https://wwa.lanzous.com/i5lBJkoqogf" target="_blank" rel="noopener">或者直接下载我上传与蓝奏云的压缩包</a>    </p><hr><h3 id="不用读系列"><a href="#不用读系列" class="headerlink" title="不用读系列"></a>不用读系列</h3><p><code>NoneBot</code> 过去是基于 酷Q 和 CQHttp 插件的机器人框架。<strong>可以将go-cqhttp看作机器人的‘后端’</strong>，用于处理通信和协议，而Nonebot作为前端负责机器人的逻辑，如发送天气等。随着八月初各大“后端”框架的扑街，两者一度被废弃至今。</p><hr><h3 id="注意！！：-配置完成后就可以通过双击-exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后-F12-打开控制台后完成滑块验证后在network中的-response-里抓取到-token-复制回go-cqhttp（tips：实在找不到可用ctrl-F搜索）"><a href="#注意！！：-配置完成后就可以通过双击-exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后-F12-打开控制台后完成滑块验证后在network中的-response-里抓取到-token-复制回go-cqhttp（tips：实在找不到可用ctrl-F搜索）" class="headerlink" title="**  注意！！： ** 配置完成后就可以通过双击.exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后 F12 打开控制台后完成滑块验证后在network中的 response 里抓取到 token 复制回go-cqhttp（tips：实在找不到可用ctrl+F搜索）"></a>**  注意！！： ** 配置完成后就可以通过双击.exe文件开始运行go-cqhttp，然后按照提示完成登入，这里需要注意的是滑块验证，需要手动将url地址复制到浏览器上打开，然后 F12 打开控制台后完成滑块验证后在network中的 response 里抓取到 token 复制回go-cqhttp（tips：实在找不到可用ctrl+F搜索）</h3><p><img src="https://s3.ax1x.com/2021/01/22/sI37Ie.png" alt="">  </p>]]></content>
      
      
      
        <tags>
            
            <tag> QQ_bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>format_change_v1.0.0</title>
      <link href="/posts/22261.html"/>
      <url>/posts/22261.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于ffmpeg集成的转码工具"><a href="#基于ffmpeg集成的转码工具" class="headerlink" title="基于ffmpeg集成的转码工具"></a>基于ffmpeg集成的转码工具</h1><h3 id="有兴趣可以翻阅-ffmpeg官网"><a href="#有兴趣可以翻阅-ffmpeg官网" class="headerlink" title="有兴趣可以翻阅 (ffmpeg官网)"></a>有兴趣可以翻阅 <a href="http://ffmpeg.org/" target="_blank" rel="noopener">(ffmpeg官网)</a></h3><ul><li><h3 id="2020-1213-更新：download"><a href="#2020-1213-更新：download" class="headerlink" title="2020/1213 更新：download"></a>2020/1213 更新：<a href="https://wwa.lanzous.com/iGjtajaqjod" target="_blank" rel="noopener">download</a></h3><img src="http://fp1.fghrsh.net/2020/12/14/ed729b48e9b3d05bbf0b8f4f57bbbcfd.md.png" alt="">  </li></ul><p>1.将程序封装成安装程序，自动将ffmpeg环境配置好  </p><p>2.修复了部分bug（重置按钮无法重置）  </p><p>3.可以使用系统卸载工具将本程序卸载</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> tkinter<span class="token comment" spellcheck="true"># from tkinter import *</span>from PIL <span class="token function">import</span> Image,ImageTk<span class="token function">import</span> re<span class="token function">import</span> os<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> base64<span class="token function">import</span> sysfrom img2 <span class="token function">import</span> imgimg_data <span class="token operator">=</span> base64.b64decode<span class="token punctuation">(</span>img<span class="token punctuation">)</span>with open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span>, <span class="token string">'wb'</span><span class="token punctuation">)</span> as f:    f.write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>    f.close<span class="token punctuation">(</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tkinter.Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 生成主窗口</span>root.title<span class="token punctuation">(</span><span class="token string">"format_change_beta"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 窗体名称</span>root.geometry<span class="token punctuation">(</span><span class="token string">"500x300"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 指定窗体大小</span>e1 <span class="token operator">=</span>tkinter.Entry<span class="token punctuation">(</span><span class="token punctuation">)</span>fm2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>l1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">"点击选择模式"</span>,font<span class="token operator">=</span><span class="token punctuation">(</span>12<span class="token punctuation">)</span>,width<span class="token operator">=</span>23,height<span class="token operator">=</span>1,bg<span class="token operator">=</span><span class="token string">"pink"</span><span class="token punctuation">)</span>l1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>count <span class="token operator">=</span> 0                <span class="token comment" spellcheck="true"># 计算纠错条件判断计数</span>news<span class="token operator">=</span>tkinter.StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># news用于实时文本显示</span>fm1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>fm1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>fm2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">'N'</span><span class="token punctuation">)</span>load <span class="token operator">=</span> Image.open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span>render <span class="token operator">=</span> ImageTk.PhotoImage<span class="token punctuation">(</span>load<span class="token punctuation">)</span>img <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm1,image<span class="token operator">=</span>render<span class="token punctuation">)</span>img.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"W"</span><span class="token punctuation">)</span>laber1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"版本号：V1.0.1"</span><span class="token punctuation">)</span>laber1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>3<span class="token punctuation">)</span>def f_inspect<span class="token punctuation">(</span>e1_get,fps_get,image_name_get<span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#检验输入规则mod</span>    global count    e1_get <span class="token operator">=</span> e1_get    fps_get <span class="token operator">=</span>fps_get    image_name_get <span class="token operator">=</span> image_name_get    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e1_get<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name_get<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps_get.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e1_get <span class="token operator">==</span> <span class="token string">""</span> or image_name_get <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+e1_get+<span class="token string">" -r "</span>+fps_get+<span class="token string">" -f image2 "</span>+f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output\\\\"</span>+image_name_get<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -i "+e1_get+" -r "+fps_get+" -f image2 "+f"{path}"+"\\\\output\\\\"+image_name_get)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect2<span class="token punctuation">(</span>e2,fps2,image_name2<span class="token punctuation">)</span>:    global count    e2 <span class="token operator">=</span> e2    fps2 <span class="token operator">=</span> fps2    image_name2 <span class="token operator">=</span> image_name2    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e2<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name2<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps2.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e2 <span class="token operator">==</span> <span class="token string">""</span> or image_name2 <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -f image2 -i "</span> + image_name2 + <span class="token string">" -vcodec libx264"</span> + <span class="token string">" -r "</span> + fps2 + f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span> + e2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -f image2 -i " + image_name2 + " -vcodec libx264" + " -r " + fps2 + f" {path}" + "\\\\output\\\\" + e2)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect3<span class="token punctuation">(</span>old_e,new_e<span class="token punctuation">)</span>:    global count    old_e <span class="token operator">=</span>old_e    new_e <span class="token operator">=</span> new_e    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>old_e<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>new_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span>  old_e <span class="token operator">==</span> <span class="token string">''</span> or new_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span> + old_e + f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span> + new_e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i " + old_e + f" {path}" + "\\\\output\\\\" + new_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect4<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:    global count    now_file_e <span class="token operator">=</span>now_file_e    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([\w\_]+.)(\w+)$'</span><span class="token punctuation">)</span>    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    m <span class="token operator">=</span> path_pattern.findall<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>    out_e <span class="token operator">=</span> <span class="token string">"."</span>+m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#输出后缀名</span>    out_e1 <span class="token operator">=</span> m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    <span class="token keyword">if</span> now_file_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:   <span class="token comment" spellcheck="true">#执行</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+now_file_e+<span class="token string">" -c:v libx264 -qp 40"</span>+f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span><span class="token punctuation">)</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i"</span>+f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span>+<span class="token string">" -r 1 -f image2 "</span>+f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span>+out_e1+<span class="token string">"_output"</span>+out_e<span class="token punctuation">)</span>        time.sleep<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        try:            os.remove<span class="token punctuation">(</span>path + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span><span class="token punctuation">)</span>        except FileNotFoundError:            print<span class="token punctuation">(</span><span class="token string">'FileNotFoundError'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i "+now_file_e+" -c:v libx264 -qp 40"+f" {path}" + "\\\\output\\\\"+"output.mkv")</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i"+f" {path}" + "\\\\output\\\\"+"output.mkv"+" -r 1 -f image2 "+f" {path}" + "\\\\output\\\\"+out_e1+"_output"+out_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#计数器</span>    global news,count    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        news.set<span class="token punctuation">(</span><span class="token string">"开始执行"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">==</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">&lt;</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"格式错误"</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> 0    else:        news.set<span class="token punctuation">(</span><span class="token string">"已经执行了\n不要再按了!!!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清空Entry模块</span>def clear<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count, restart    count <span class="token operator">=</span> 0    restart <span class="token operator">=</span> 0    global e1,image_name,fps    image_name.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear2<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count, restart    count <span class="token operator">=</span> 0    restart <span class="token operator">=</span> 0    global e2, fps2, image_name2    e2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    image_name2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear3<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count, restart    count <span class="token operator">=</span>0    restart <span class="token operator">=</span> 0    global old_e,new_e    old_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    new_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear4<span class="token punctuation">(</span><span class="token punctuation">)</span>:    global count,restart    count<span class="token operator">=</span>0    restart <span class="token operator">=</span> 0    global now_file_e,out_e    now_file_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def fuc_1<span class="token punctuation">(</span><span class="token punctuation">)</span>:     <span class="token comment" spellcheck="true">#-----视频转图片-----</span>    global e1_get,fps_get,image_name_get,e1,image_name,fps,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart <span class="token operator">==</span> 0<span class="token punctuation">)</span>:        t1 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t1.title<span class="token punctuation">(</span><span class="token string">"视频转图片"</span><span class="token punctuation">)</span>        t1.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        labe_1<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"将视频分割为N张图片"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>        labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>        labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        e1 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 文件名 e1</span>        e1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">#组 1 位置</span>        labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>        labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        fps <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 帧数 fps</span>        fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>        image_name <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出文件规则 image_name</span>        labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        image_name.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2,text<span class="token operator">=</span><span class="token string">"执行"</span>,width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command <span class="token operator">=</span>lambda: f_inspect<span class="token punctuation">(</span>e1.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,fps.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,image_name.get<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"重置"</span>,width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 4,command <span class="token operator">=</span>lambda: clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"W"</span><span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#组2 位置</span>        <span class="token comment" spellcheck="true"># f1.bind("&lt;Return>",button_c)</span>        restart+<span class="token operator">=</span>1def fuc_2<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true"># -----图片转视频-----</span>    global e2,fps2,image_name2,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart <span class="token operator">==</span>0<span class="token punctuation">)</span>:        t2 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t2.title<span class="token punctuation">(</span><span class="token string">"图片转视频"</span><span class="token punctuation">)</span>        t2.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>        labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        e2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 文件名 e2</span>        e2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组 1 位置</span>        labe_1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"将N张图片转成视频"</span>.center<span class="token punctuation">(</span>50, <span class="token string">"-"</span><span class="token punctuation">))</span>        labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>        labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        fps2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#帧数 fps2</span>        fps2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片的命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>        image_name2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 图片规则 image_name2</span>        labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        image_name2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按钮</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect2<span class="token punctuation">(</span>e2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, fps2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, image_name2.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear2<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>        restart+<span class="token operator">=</span>1def fuc_3<span class="token punctuation">(</span><span class="token punctuation">)</span>:   <span class="token comment" spellcheck="true">#  change_format 音视频图片格式转换</span>    global old_e,new_e,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart<span class="token operator">==</span>0<span class="token punctuation">)</span>:        t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>        t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>        impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>        old_file<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>        old_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>        old_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#old file name : old_e</span>        old_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        new_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>        new_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        new_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>        new_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按钮</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect3<span class="token punctuation">(</span>old_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, new_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear3<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>        restart +<span class="token operator">=</span> 1def fuc_4<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#图片压缩   fuc 都是布局方法引用在inspect</span>    global now_file_e,out_e,restart    restart <span class="token operator">=</span> 0    while<span class="token punctuation">(</span>restart<span class="token operator">==</span>0<span class="token punctuation">)</span>:        t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>        t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>        f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>        impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>        impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>        now_file_label<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>        now_file_label.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>        now_file_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># old file name : now_file_e</span>        now_file_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>        la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>        la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 按钮</span>        button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect4<span class="token punctuation">(</span>now_file_e.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>        button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear4<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>        f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>        restart+<span class="token operator">=</span>1button1<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----视频转图片-----'</span>,command<span class="token operator">=</span>fuc_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成button1</span>button2<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----图片转视频-----'</span>,command<span class="token operator">=</span>fuc_2<span class="token punctuation">)</span>button3<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'音视频图片格式转换'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_3<span class="token punctuation">)</span>button1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button3.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button4 <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>fm2,width<span class="token operator">=</span>15, height<span class="token operator">=</span>1,text<span class="token operator">=</span><span class="token string">'图片压缩'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_4<span class="token punctuation">)</span>button4.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>def caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>:    menu<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    submenu1<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>menu,tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'happy day'</span>,menu<span class="token operator">=</span>submenu1<span class="token punctuation">)</span>    submenu2 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'gookluck'</span><span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'allright'</span><span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'checkthis'</span>,menu<span class="token operator">=</span>submenu2<span class="token punctuation">)</span>    submenu3 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'格式帮助'</span>,menu<span class="token operator">=</span>submenu3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># menu.add_checkbutton(label="格式帮助",menu=submenu3)</span>    <span class="token comment" spellcheck="true"># submenu3.bind("&lt;Button-1>",fuc_1)</span>    root.config<span class="token punctuation">(</span>menu<span class="token operator">=</span>menu<span class="token punctuation">)</span>caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>root.mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#进入消息循环（必需组件）</span>os.remove<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#清除临时图片</span></code></pre><ul><li><h3 id="V1-0-1更新："><a href="#V1-0-1更新：" class="headerlink" title="V1.0.1更新："></a>V1.0.1更新：</h3><p>1.通过python自带的tkinter实现了gui可视化  </p><p>2 新增图片压缩模块<br><img src="http://fp1.fghrsh.net/2020/12/10/dd7613e40d7e4a1fc1bc5237780299a9.md.png" alt=""></p><h3 id="v1-0-1下载download"><a href="#v1-0-1下载download" class="headerlink" title="v1.0.1下载download"></a>v1.0.1下载<a href="https://wwa.lanzous.com/iHGrzh80lab" target="_blank" rel="noopener">download</a></h3><p>此次更新可视化源码如下：</p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> tkinter<span class="token comment" spellcheck="true"># from tkinter import *</span>from PIL <span class="token function">import</span> Image,ImageTk<span class="token function">import</span> re<span class="token function">import</span> os<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> base64<span class="token function">import</span> sysfrom img2 <span class="token function">import</span> imgimg_data <span class="token operator">=</span> base64.b64decode<span class="token punctuation">(</span>img<span class="token punctuation">)</span>with open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span>, <span class="token string">'wb'</span><span class="token punctuation">)</span> as f:    f.write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>    f.close<span class="token punctuation">(</span><span class="token punctuation">)</span>root <span class="token operator">=</span> tkinter.Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 生成主窗口</span>root.title<span class="token punctuation">(</span><span class="token string">"format_change_beta"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 窗体名称</span>root.geometry<span class="token punctuation">(</span><span class="token string">"500x300"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 指定窗体大小</span>e1 <span class="token operator">=</span>tkinter.Entry<span class="token punctuation">(</span><span class="token punctuation">)</span>fm2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>l1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">"点击选择模式"</span>,font<span class="token operator">=</span><span class="token punctuation">(</span>12<span class="token punctuation">)</span>,width<span class="token operator">=</span>23,height<span class="token operator">=</span>1,bg<span class="token operator">=</span><span class="token string">"pink"</span><span class="token punctuation">)</span>l1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>count <span class="token operator">=</span> 0                <span class="token comment" spellcheck="true"># 计算纠错条件判断计数</span>news<span class="token operator">=</span>tkinter.StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># news用于实时文本显示</span>fm1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>root<span class="token punctuation">)</span>fm1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>fm2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">'N'</span><span class="token punctuation">)</span>load <span class="token operator">=</span> Image.open<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span>render <span class="token operator">=</span> ImageTk.PhotoImage<span class="token punctuation">(</span>load<span class="token punctuation">)</span>img <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>fm1,image<span class="token operator">=</span>render<span class="token punctuation">)</span>img.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"W"</span><span class="token punctuation">)</span>laber1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"版本号：V1.0.1"</span><span class="token punctuation">)</span>laber1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>3<span class="token punctuation">)</span>def f_inspect<span class="token punctuation">(</span>e1_get,fps_get,image_name_get<span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#检验输入规则mod</span>    global count    e1_get <span class="token operator">=</span> e1_get    fps_get <span class="token operator">=</span>fps_get    image_name_get <span class="token operator">=</span> image_name_get    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e1_get<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name_get<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps_get.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e1_get <span class="token operator">==</span> <span class="token string">""</span> or image_name_get <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+e1_get+<span class="token string">" -r "</span>+fps_get+<span class="token string">" -f image2 "</span>+f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output\\\\"</span>+image_name_get<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -i "+e1_get+" -r "+fps_get+" -f image2 "+f"{path}"+"\\\\output\\\\"+image_name_get)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect2<span class="token punctuation">(</span>e2,fps2,image_name2<span class="token punctuation">)</span>:    global count    e2 <span class="token operator">=</span> e2    fps2 <span class="token operator">=</span> fps2    image_name2 <span class="token operator">=</span> image_name2    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>e2<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>image_name2<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not fps2.isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> or e2 <span class="token operator">==</span> <span class="token string">""</span> or image_name2 <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -f image2 -i "</span> + image_name2 + <span class="token string">" -vcodec libx264"</span> + <span class="token string">" -r "</span> + fps2 + f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span> + e2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print("ffmpeg -f image2 -i " + image_name2 + " -vcodec libx264" + " -r " + fps2 + f" {path}" + "\\\\output\\\\" + e2)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect3<span class="token punctuation">(</span>old_e,new_e<span class="token punctuation">)</span>:    global count    old_e <span class="token operator">=</span>old_e    new_e <span class="token operator">=</span> new_e    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>old_e<span class="token punctuation">)</span> or not pattern.search<span class="token punctuation">(</span>new_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span>  old_e <span class="token operator">==</span> <span class="token string">''</span> or new_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span> + old_e + f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span> + new_e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i " + old_e + f" {path}" + "\\\\output\\\\" + new_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def f_inspect4<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:    global count    now_file_e <span class="token operator">=</span>now_file_e    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([\w\_]+.)(\w+)$'</span><span class="token punctuation">)</span>    pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span><span class="token string">'\.+'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> not pattern.search<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>:        count -<span class="token operator">=</span> 5    m <span class="token operator">=</span> path_pattern.findall<span class="token punctuation">(</span>now_file_e<span class="token punctuation">)</span>    out_e <span class="token operator">=</span> <span class="token string">"."</span>+m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>     <span class="token comment" spellcheck="true">#输出后缀名</span>    out_e1 <span class="token operator">=</span> m<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>    path <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    count +<span class="token operator">=</span> 1    <span class="token keyword">if</span> now_file_e <span class="token operator">==</span> <span class="token string">""</span><span class="token keyword">:</span>        count -<span class="token operator">=</span> 5    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:   <span class="token comment" spellcheck="true">#执行</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+now_file_e+<span class="token string">" -c:v libx264 -qp 40"</span>+f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span><span class="token punctuation">)</span>        os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i"</span>+f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span>+<span class="token string">"output.mkv"</span>+<span class="token string">" -r 1 -f image2 "</span>+f<span class="token string">" {path}"</span> + <span class="token string">"\\\\output\\\\"</span>+out_e1+<span class="token string">"_output"</span>+out_e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i "+now_file_e+" -c:v libx264 -qp 40"+f" {path}" + "\\\\output\\\\"+"output.mkv")</span>        <span class="token comment" spellcheck="true"># print("ffmpeg -i"+f" {path}" + "\\\\output\\\\"+"output.mkv"+" -r 1 -f image2 "+f" {path}" + "\\\\output\\\\"+out_e1+"_output"+out_e)</span>    time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>def time_c<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#计数器</span>    global news,count    <span class="token keyword">if</span> count <span class="token operator">==</span> 1:        news.set<span class="token punctuation">(</span><span class="token string">"开始执行"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">==</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">&lt;</span> 0:        news.set<span class="token punctuation">(</span><span class="token string">"格式错误"</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> 0    else:        news.set<span class="token punctuation">(</span><span class="token string">"已经执行了\n不要再按了!!!"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清空Entry模块</span>def clear<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count <span class="token operator">=</span> 0    global e1,image_name,fps    e1.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    image_name.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear2<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count <span class="token operator">=</span> 0    global e2, fps2, image_name2    e2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    image_name2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    fps2.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear3<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count <span class="token operator">=</span>0    global old_e,new_e    old_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    new_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def clear4<span class="token punctuation">(</span><span class="token punctuation">)</span>:    count<span class="token operator">=</span>0    global now_file_e,out_e    now_file_e.delete<span class="token punctuation">(</span>0,<span class="token string">'end'</span><span class="token punctuation">)</span>    news.set<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>def fuc_1<span class="token punctuation">(</span><span class="token punctuation">)</span>:     <span class="token comment" spellcheck="true">#-----视频转图片-----</span>    global e1_get,fps_get,image_name_get,e1,image_name,fps    t1 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t1.title<span class="token punctuation">(</span><span class="token string">"视频转图片"</span><span class="token punctuation">)</span>    t1.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    labe_1<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"将视频分割为N张图片"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>    labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    e1 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 文件名 e1</span>    e1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">#组 1 位置</span>    labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    fps <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 帧数 fps</span>    fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    image_name <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出文件规则 image_name</span>    labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    image_name.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2,text<span class="token operator">=</span><span class="token string">"执行"</span>,width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command <span class="token operator">=</span>lambda: f_inspect<span class="token punctuation">(</span>e1.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,fps.get<span class="token punctuation">(</span><span class="token punctuation">)</span>,image_name.get<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>2,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"重置"</span>,width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 4,command <span class="token operator">=</span>lambda: clear<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"W"</span><span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"S"</span>+<span class="token string">"E"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#组2 位置</span>    <span class="token comment" spellcheck="true"># f1.bind("&lt;Return>",button_c)</span>def fuc_2<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true"># -----图片转视频-----</span>    global e2,fps2,image_name2    t2 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t2.title<span class="token punctuation">(</span><span class="token string">"图片转视频"</span><span class="token punctuation">)</span>    t2.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    labe_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>    labe_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    e2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"请输入输出视频名：（例：out.mp4）:"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 文件名 e2</span>    e2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组 1 位置</span>    labe_1 <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"将N张图片转成视频"</span>.center<span class="token punctuation">(</span>50, <span class="token string">"-"</span><span class="token punctuation">))</span>    labe_1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_fps <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    labe_fps.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    fps2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#帧数 fps2</span>    fps2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    labe_image <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片的命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    image_name2 <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"拼接图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 图片规则 image_name2</span>    labe_image.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>6, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    image_name2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>7, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按钮</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect2<span class="token punctuation">(</span>e2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, fps2.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, image_name2.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear2<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>def fuc_3<span class="token punctuation">(</span><span class="token punctuation">)</span>:   <span class="token comment" spellcheck="true">#  change_format 音视频图片格式转换</span>    global old_e,new_e    t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>    t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>    impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>    old_file<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>    old_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>    old_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#old file name : old_e</span>    old_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    new_file <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>    new_file.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    new_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1,text<span class="token operator">=</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4):"</span><span class="token punctuation">)</span>    new_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按钮</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect3<span class="token punctuation">(</span>old_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span>, new_e.get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear3<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>def fuc_4<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#图片压缩   fuc 都是布局方法引用在inspect</span>    global now_file_e,out_e    t3 <span class="token operator">=</span> tkinter.Toplevel<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    t3.title<span class="token punctuation">(</span><span class="token string">"音视频图片格式转换"</span><span class="token punctuation">)</span>    t3.geometry<span class="token punctuation">(</span><span class="token string">"400x400"</span><span class="token punctuation">)</span>    f1 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组1 f1</span>    f2 <span class="token operator">=</span> tkinter.Frame<span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组2 f2</span>    impt <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"    注意一定要把本程序放于执行目标的目录中运行"</span><span class="token punctuation">)</span>    impt.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1,column<span class="token operator">=</span>1,sticky<span class="token operator">=</span><span class="token string">"N"</span><span class="token punctuation">)</span>    now_file_label<span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>    now_file_label.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    f1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"N"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 组 1 位置</span>    now_file_e <span class="token operator">=</span> tkinter.Entry<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"待压缩的图片名：(需带后缀 例：input.jpg 或 input.png):"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># old file name : now_file_e</span>    now_file_e.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>    la_s <span class="token operator">=</span> tkinter.Label<span class="token punctuation">(</span>f2, width<span class="token operator">=</span>10, height<span class="token operator">=</span>5, bg<span class="token operator">=</span><span class="token string">'white'</span>, anchor<span class="token operator">=</span><span class="token string">'se'</span>, textvariable<span class="token operator">=</span>news<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#实时文本 对应news的返回</span>    la_s.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>1, column<span class="token operator">=</span>1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按钮</span>    button_c <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f2, text<span class="token operator">=</span><span class="token string">"执行"</span>, width <span class="token operator">=</span> 15, height <span class="token operator">=</span> 2,command<span class="token operator">=</span>lambda: f_inspect4<span class="token punctuation">(</span>now_file_e.get<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>2, sticky<span class="token operator">=</span><span class="token string">"S"</span> <span class="token punctuation">)</span>    button_r <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>f1, text<span class="token operator">=</span><span class="token string">"重置"</span>, width <span class="token operator">=</span> 7, height <span class="token operator">=</span> 3,command<span class="token operator">=</span>lambda: clear4<span class="token punctuation">(</span><span class="token punctuation">))</span>.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>10, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"W"</span><span class="token punctuation">)</span>    f2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2, column<span class="token operator">=</span>1, sticky<span class="token operator">=</span><span class="token string">"S"</span> + <span class="token string">"E"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># f2 grad  组2 部署</span>button1<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----视频转图片-----'</span>,command<span class="token operator">=</span>fuc_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#生成button1</span>button2<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'-----图片转视频-----'</span>,command<span class="token operator">=</span>fuc_2<span class="token punctuation">)</span>button3<span class="token operator">=</span>tkinter.Button<span class="token punctuation">(</span>fm2,text<span class="token operator">=</span><span class="token string">'音视频图片格式转换'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_3<span class="token punctuation">)</span>button1.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>2,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button2.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>3,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button3.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>4,column<span class="token operator">=</span>1<span class="token punctuation">)</span>button4 <span class="token operator">=</span> tkinter.Button<span class="token punctuation">(</span>fm2,width<span class="token operator">=</span>15, height<span class="token operator">=</span>1,text<span class="token operator">=</span><span class="token string">'图片压缩'</span>.center<span class="token punctuation">(</span>10,<span class="token string">"-"</span><span class="token punctuation">)</span>,command<span class="token operator">=</span>fuc_4<span class="token punctuation">)</span>button4.grid<span class="token punctuation">(</span>row<span class="token operator">=</span>5,column<span class="token operator">=</span>1<span class="token punctuation">)</span>def caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>:    menu<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    submenu1<span class="token operator">=</span>tkinter.Menu<span class="token punctuation">(</span>menu,tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'happy day'</span>,menu<span class="token operator">=</span>submenu1<span class="token punctuation">)</span>    submenu2 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'gookluck'</span><span class="token punctuation">)</span>    submenu2.add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'allright'</span><span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'checkthis'</span>,menu<span class="token operator">=</span>submenu2<span class="token punctuation">)</span>    submenu3 <span class="token operator">=</span> tkinter.Menu<span class="token punctuation">(</span>menu, tearoff<span class="token operator">=</span>0<span class="token punctuation">)</span>    menu.add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'格式帮助'</span>,menu<span class="token operator">=</span>submenu3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># menu.add_checkbutton(label="格式帮助",menu=submenu3)</span>    <span class="token comment" spellcheck="true"># submenu3.bind("&lt;Button-1>",fuc_1)</span>    root.config<span class="token punctuation">(</span>menu<span class="token operator">=</span>menu<span class="token punctuation">)</span>caidan<span class="token punctuation">(</span>root<span class="token punctuation">)</span>root.mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#进入消息循环（必需组件）</span>os.remove<span class="token punctuation">(</span><span class="token string">'84697796_p0.png'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#清除临时图片</span></code></pre><ul><li><h3 id="V1-0-0"><a href="#V1-0-0" class="headerlink" title="V1.0.0"></a>V1.0.0</h3><h3 id="可实现的功能-（基于ffmpeg进行的）-ffmpeg官网"><a href="#可实现的功能-（基于ffmpeg进行的）-ffmpeg官网" class="headerlink" title="* 可实现的功能*  （基于ffmpeg进行的） (ffmpeg官网)"></a>* 可实现的功能*  （基于ffmpeg进行的） <a href="http://ffmpeg.org/" target="_blank" rel="noopener">(ffmpeg官网)</a></h3></li><li><h4 id="1-将视频提取设定帧转为N张图片"><a href="#1-将视频提取设定帧转为N张图片" class="headerlink" title="1.将视频提取设定帧转为N张图片"></a>1.将视频提取设定帧转为N张图片</h4></li><li><h4 id="2-将N张图片封装为视频格式（可设置帧数）"><a href="#2-将N张图片封装为视频格式（可设置帧数）" class="headerlink" title="2.将N张图片封装为视频格式（可设置帧数）"></a>2.将N张图片封装为视频格式（可设置帧数）</h4></li><li><h4 id="3-音视频格式的简单转换"><a href="#3-音视频格式的简单转换" class="headerlink" title="3.音视频格式的简单转换"></a>3.音视频格式的简单转换</h4></li></ul><h3 id="下载download"><a href="#下载download" class="headerlink" title="下载download"></a>下载<a href="https://wwa.lanzous.com/itD4oh6pivc" target="_blank" rel="noopener">download</a></h3><p>源码如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -*- coding: gbk -*-</span><span class="token function">import</span> re<span class="token function">import</span> osprint<span class="token punctuation">(</span><span class="token string">"format_change_v1.0.0"</span>.center<span class="token punctuation">(</span>50,<span class="token string">'-'</span><span class="token punctuation">))</span>print<span class="token punctuation">(</span><span class="token string">"注意需要将程序放置于被执行的文件目录"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">''</span><span class="token string">'    视频转图片请输入： i    图片转视频请输入： o    音视频格式转换： c    格式帮助列表： help'</span><span class="token string">''</span><span class="token punctuation">)</span>def en_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token comment" spellcheck="true">#规定输入规则</span>    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([a-zA-Z]:)(\\\\\w+)*$'</span><span class="token punctuation">)</span>    fps_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>    file_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^(\w+)\.(\w+)'</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"ffmpeg将视频分割为N张图片"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入视频路经(例如D:\\\\filedir)(注意：不包括文件名)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not path_pattern.search<span class="token punctuation">(</span>path<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入视频路经(例如D:\\\\filedir)(注意：不包括文件名)："</span><span class="token punctuation">)</span>    <span class="token function">file</span> <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入文件名(需要加后缀名)（如：out.mp4）:"</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not fps_pat.search<span class="token punctuation">(</span>fps<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输出帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    image_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("cd "+path[0]+path[1])</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("cd "+path)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span>+path<span class="token punctuation">)</span>    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+file+<span class="token string">" -r "</span>+fps+<span class="token string">" -f image2 "</span>+f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output\\\\"</span>+image_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("ffmpeg -i "+f"{path}\\\\"+file+" -r "+fps+" -f image2 "+f"{path}"+"\\\\output\\\\"+image_name)</span>def de_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>:    <span class="token comment" spellcheck="true">#规定输入规则</span>    path_pattern <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^([a-zA-Z]:)(\\\\\w+)*$'</span><span class="token punctuation">)</span>    fps_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>    file_pat <span class="token operator">=</span> re.compile<span class="token punctuation">(</span>r<span class="token string">'^(\w+)\.(\w+)'</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token string">"ffmpeg将N张图片转成视频"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入图片文件路经(例如D:\\\\filedir)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not path_pattern.search<span class="token punctuation">(</span>path<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        path <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入图片文件路经(例如D:\\\\filedir)："</span><span class="token punctuation">)</span>    fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> not fps_pat.search<span class="token punctuation">(</span>fps<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"格式错误，请重新输入"</span><span class="token punctuation">)</span>        fps <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"编码帧数(常用：25/30/60)："</span><span class="token punctuation">)</span>    image_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"拼接图片命名规则（如：name04%d）(需要加后缀名.jpg或.png)："</span><span class="token punctuation">)</span>    new_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入输出视频名：（例：out.mp4）"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + path<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span> + path<span class="token punctuation">)</span>    <span class="token keyword">if</span> not os.path.exists<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>:        os.mkdir<span class="token punctuation">(</span>f<span class="token string">"{path}"</span>+<span class="token string">"\\\\output"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -f image2 -i "</span>+image_name+<span class="token string">" -vcodec libx264"</span>+<span class="token string">" -r "</span>+fps+f<span class="token string">" {path}"</span>+<span class="token string">"\\\\output\\\\"</span>+new_name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("ffmpeg -f image2 -i "+image_name+" -vcodec libx264"+" -r "+fps+f" {path}"+"\\\\output\\\\"+new_name)</span>def change_format<span class="token punctuation">(</span><span class="token punctuation">)</span>:    print<span class="token punctuation">(</span><span class="token string">"音视频格式转换"</span>.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>    print<span class="token punctuation">(</span><span class="token string">"注意：需将程序放置于同目录。。。"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># path_pattern = re.compile(r'^([a-zA-Z]:)(\\\\\w+)*$')</span>    path1 <span class="token operator">=</span> os.getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span>path1<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+path1<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"cd "</span>+path1<span class="token punctuation">)</span>    old_file <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"待转换文件名：(需带后缀 例：input.mp4):"</span><span class="token punctuation">)</span>    new_file <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"转换格式后输出的文件名：（需带后缀 例：output.mp4)"</span><span class="token punctuation">)</span>    os.system<span class="token punctuation">(</span><span class="token string">"ffmpeg -i "</span>+old_file+<span class="token string">" "</span>+new_file<span class="token punctuation">)</span>def format_help<span class="token punctuation">(</span><span class="token punctuation">)</span>:    print<span class="token punctuation">(</span><span class="token string">''</span><span class="token string">'    音频格式：------------有损格式------------mp3: 最常见的有损压缩格式，在高频部分有较明显损失wma:已经不大流行的音频压缩格式，由微软开发，在比特率相同时比mp3音质好些，微软后期又开发了wma lossless，可达到无损压缩，但wma一直没有mp3普及aac:比mp3压缩效果和音质更好的格式，著名的itunes store提供的音乐就是itunes plus aac（文件后缀为.m4a），并且都加载了歌曲详细信息和专辑封面，因而成为现今移动设备上替代mp3的理想格式其他格式：ogg , mpc等------------无损格式------------flac:如今十分流行的无损格式，如今已获得许多软件、操作系统、和硬件的支持，压缩效果比ape略差，但解码速度要比ape高。现今许多mp3、mp4都已支持flac与ape，安卓系统也有许多播放器支持这两种格式。ape:与flac同样流行的无损压缩格式。wv:另一种压缩格式，最大特点是既可以无损，也可以有损，但没有前两者流行。apple lossless:由苹果开发的无损格式，可由Ipod及Iphone直接播放，可以添加专辑封面。wav:可以直接存储cd中音频信息的格式，但由于没有压缩，所以体积大，由微软开发。aiff:与wav相似的格式，但是由苹果公司开发，可以在文件内添加专辑封面（而wav不能）。-----------------------------------------------------------------------------------------------    视频格式：MPEGavi:音频视频交错(Audio Video Interleaved)的英文缩写。AVI这个由微软公司发表的视频格式在视频领域已经存在好几个年头了。AVI格式调用方便、图像质量好，但缺点就是文件体积过于庞大，压缩标准不统一。mov:wmv:flv:mp4: 最常用'</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">while</span> True:    choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入模式："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">"i"</span><span class="token keyword">:</span>        en_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">"o"</span><span class="token keyword">:</span>        de_cod<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">"c"</span><span class="token keyword">:</span>        change_format<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">"help"</span><span class="token keyword">:</span>        format_help<span class="token punctuation">(</span><span class="token punctuation">)</span>    else:        print<span class="token punctuation">(</span><span class="token string">"输入错误,请重试。。。"</span><span class="token punctuation">)</span></code></pre><h2 id="自己封装的一些文件操作脚本：-下载地址download"><a href="#自己封装的一些文件操作脚本：-下载地址download" class="headerlink" title="自己封装的一些文件操作脚本： 下载地址download"></a>自己封装的一些文件操作脚本： 下载地址<a href="https://wwa.lanzous.com/iN2Zgh6028d" target="_blank" rel="noopener">download</a></h2>]]></content>
      
      
      <categories>
          
          <category> python项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ascii_art</title>
      <link href="/posts/55427.html"/>
      <url>/posts/55427.html</url>
      
        <content type="html"><![CDATA[<h3 id="ascii字符画"><a href="#ascii字符画" class="headerlink" title="ascii字符画"></a>ascii字符画</h3><pre class=" language-bash"><code class="language-bash">from PIL <span class="token function">import</span> Image, ImageDraw, ImageFont<span class="token function">import</span> argparse<span class="token function">import</span> numpy as npsample_rate <span class="token operator">=</span> 0.4def ascii_art<span class="token punctuation">(</span>file<span class="token punctuation">)</span>:    im <span class="token operator">=</span> Image.open<span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Compute letter aspect ratio</span>    font <span class="token operator">=</span> ImageFont.load_default<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># font = ImageFont.truetype("SourceCodePro-Bold.ttf", size=12)</span>    aspect_ratio <span class="token operator">=</span> font.getsize<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span> / font.getsize<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>    new_im_size <span class="token operator">=</span> np.array<span class="token punctuation">(</span>        <span class="token punctuation">[</span>im.size<span class="token punctuation">[</span>0<span class="token punctuation">]</span> * sample_rate, im.size<span class="token punctuation">[</span>1<span class="token punctuation">]</span> * sample_rate * aspect_ratio<span class="token punctuation">]</span>    <span class="token punctuation">)</span>.astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Downsample the image</span>    im <span class="token operator">=</span> im.resize<span class="token punctuation">(</span>new_im_size<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Keep a copy of image for color sampling</span>    im_color <span class="token operator">=</span> np.array<span class="token punctuation">(</span>im<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Convert to gray scale image</span>    im <span class="token operator">=</span> im.convert<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Convert to numpy array for image manipulation</span>    im <span class="token operator">=</span> np.array<span class="token punctuation">(</span>im<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Defines all the symbols in ascending order that will form the final ascii</span>    symbols <span class="token operator">=</span> np.array<span class="token punctuation">(</span>list<span class="token punctuation">(</span><span class="token string">" .-vM"</span><span class="token punctuation">))</span>    <span class="token comment" spellcheck="true"># Normalize minimum and maximum to [0, max_symbol_index)</span>    im <span class="token operator">=</span> <span class="token punctuation">(</span>im - im.min<span class="token punctuation">(</span><span class="token punctuation">))</span> / <span class="token punctuation">(</span>im.max<span class="token punctuation">(</span><span class="token punctuation">)</span> - im.min<span class="token punctuation">(</span><span class="token punctuation">))</span> * <span class="token punctuation">(</span>symbols.size - 1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Generate the ascii art</span>    ascii <span class="token operator">=</span> symbols<span class="token punctuation">[</span>im.astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Create an output image for drawing ascii text</span>    letter_size <span class="token operator">=</span> font.getsize<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>    im_out_size <span class="token operator">=</span> new_im_size * letter_size    bg_color <span class="token operator">=</span> <span class="token string">"black"</span>    im_out <span class="token operator">=</span> Image.new<span class="token punctuation">(</span><span class="token string">"RGB"</span>, tuple<span class="token punctuation">(</span>im_out_size<span class="token punctuation">)</span>, bg_color<span class="token punctuation">)</span>    draw <span class="token operator">=</span> ImageDraw.Draw<span class="token punctuation">(</span>im_out<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Draw text</span>    y <span class="token operator">=</span> 0    <span class="token keyword">for</span> i, line <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>ascii<span class="token punctuation">)</span>:        <span class="token keyword">for</span> j, ch <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>line<span class="token punctuation">)</span>:            color <span class="token operator">=</span> tuple<span class="token punctuation">(</span>im_color<span class="token punctuation">[</span>i, j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># sample color from original image</span>            draw.text<span class="token punctuation">((</span>letter_size<span class="token punctuation">[</span>0<span class="token punctuation">]</span> * j, y<span class="token punctuation">)</span>, ch<span class="token punctuation">[</span>0<span class="token punctuation">]</span>, fill<span class="token operator">=</span>color, font<span class="token operator">=</span>font<span class="token punctuation">)</span>        y +<span class="token operator">=</span> letter_size<span class="token punctuation">[</span>1<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># increase y by letter height</span>    <span class="token comment" spellcheck="true"># Save image file</span>    im_out.save<span class="token punctuation">(</span>file + <span class="token string">".ascii.png"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token keyword">:</span>    parser <span class="token operator">=</span> argparse.ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"Convert any image to ascii art."</span><span class="token punctuation">)</span>    parser.add_argument<span class="token punctuation">(</span>        <span class="token string">"file"</span>, type<span class="token operator">=</span>str, help<span class="token operator">=</span><span class="token string">"input image file"</span>,    <span class="token punctuation">)</span>    args <span class="token operator">=</span> parser.parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    ascii_art<span class="token punctuation">(</span>args.file<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for i in range(1,6571):</span><span class="token comment" spellcheck="true">#     while len(str(i)) != 5:</span><span class="token comment" spellcheck="true">#         i = "0"+ str(i)</span><span class="token comment" spellcheck="true">#     v = "badapple/",f"foo-0{i}",".jpeg"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> py_ascii_art </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pypi国内镜像源</title>
      <link href="/posts/3513.html"/>
      <url>/posts/3513.html</url>
      
        <content type="html"><![CDATA[<h3 id="pypi的国内镜像源："><a href="#pypi的国内镜像源：" class="headerlink" title="pypi的国内镜像源："></a>pypi的国内镜像源：</h3><ul><li><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a>  </p></li><li><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></p></li></ul><ul><li><p>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a>  </p></li><li><p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a>  </p></li><li><p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a>  </p></li></ul><p><img src="http://fp1.fghrsh.net/2020/10/01/0a7918b986f595b4c55b66262223c1aa.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则零宽断言</title>
      <link href="/posts/22595.html"/>
      <url>/posts/22595.html</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式之零宽断言"><a href="#正则表达式之零宽断言" class="headerlink" title="正则表达式之零宽断言"></a>正则表达式之零宽断言</h3><p>零宽断言是正则表达式的一种方法，用于查找在某些内容（但并不包括这些内容）之前或者之后的东西，也就是说他们像\b（匹配一个单词边界，也就是单词和空格间的位置，正则表达式的匹配有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置，例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”），^（匹配输入字行首），$（匹配输入字行尾）那样用于指定一个位置，这个位置应该满足一定的条件（即断言），因此它们也被称为零宽断言。断言用来声明一个应该为真的事实，正则表达式中只有当断言为真时才会继续进行匹配。</p><p>零宽断言一共分为四种</p><p>1．零宽度正预测先行断言 (?=exp)匹配exp前面的位置</p><p>例：\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</p><p>2．零宽度正回顾后发断言 (?&lt;exp)匹配exp后面的位置</p><p>例：比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</p><p>3．零宽度负预测先行断言 (?!exp)匹配后面跟的不是exp的位置</p><p>例：例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</p><p>4．零宽度负回顾后发断言 (?&lt;!exp)匹配前面不是exp的位置</p><p>例：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 零宽断言</span><span class="token function">import</span> res <span class="token operator">=</span> r<span class="token string">'eating apple seeing paper watching movie'</span>m1 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(\b\w+?)ing'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#['eat', 'see', 'watch']</span>m2 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(.+?)(?=ing)'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['eat', 'ing apple see', 'ing paper watch']</span>m3 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(.+?)(?&lt;=ing)'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['eating', ' apple seeing', ' paper watching']</span>s <span class="token operator">=</span> <span class="token string">'unite one unethical ethics use untie ultimate'</span>m4 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'\b(?!un)\w+\b'</span>,s<span class="token punctuation">)</span>print<span class="token punctuation">(</span>m4<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['one', 'ethics', 'use', 'ultimate']</span>m5 <span class="token operator">=</span> re.findall<span class="token punctuation">(</span>r<span class="token string">'(?&lt;![a-z])\d{3,}'</span>,<span class="token string">'abc123,123,4567'</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>m5<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['123', '4567']</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零之使魔</title>
      <link href="/posts/15960.html"/>
      <url>/posts/15960.html</url>
      
        <content type="html"><![CDATA[<h2 id="零之使魔22卷漫画epub格式下载："><a href="#零之使魔22卷漫画epub格式下载：" class="headerlink" title="零之使魔22卷漫画epub格式下载："></a>零之使魔22卷漫画epub格式下载：</h2><h3 id="下载地址-访问码-rv3a"><a href="#下载地址-访问码-rv3a" class="headerlink" title="下载地址  (访问码:rv3a)"></a><a href="https://cloud.189.cn/t/3MFjAzu2MF7f" target="_blank" rel="noopener">下载地址</a>  (访问码:rv3a)</h3><p><img src="http://fp1.fghrsh.net/2020/08/31/e419ad07119bf23cbbef7342f92e0361.th.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 追番 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/posts/51872.html"/>
      <url>/posts/51872.html</url>
      
        <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><p>first code:  </p><pre class=" language-bash"><code class="language-bash">print<span class="token punctuation">(</span><span class="token string">"hellow world"</span><span class="token punctuation">)</span></code></pre><p>first day:  </p><pre class=" language-bash"><code class="language-bash">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"please input yourname:"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(name)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A = "2"</span><span class="token comment" spellcheck="true"># print(A *10)</span><span class="token comment" spellcheck="true"># Name = input("please input your name:") </span><span class="token comment" spellcheck="true"># Age = input("please input your age:")</span><span class="token comment" spellcheck="true"># job = input("please input your job:")</span><span class="token comment" spellcheck="true"># hobbie = input("please input your hobbie:")</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># msg = f'''                                #多行字符串格式</span><span class="token comment" spellcheck="true"># ------------ info of {Name} ------------</span><span class="token comment" spellcheck="true"># Name   : {Name}</span><span class="token comment" spellcheck="true"># Age    : {Age}</span><span class="token comment" spellcheck="true"># job    : {job}</span><span class="token comment" spellcheck="true"># hobbie : {hobbie}</span><span class="token comment" spellcheck="true"># ------------------ end ------------------</span><span class="token comment" spellcheck="true"># '''</span><span class="token comment" spellcheck="true"># print(msg)</span><span class="token comment" spellcheck="true"># salary = int(input("salary:"))</span><span class="token comment" spellcheck="true"># if salary &lt;= int(10000):</span><span class="token comment" spellcheck="true">#     print("you too low ,pls go to learn more knowledge")</span><span class="token comment" spellcheck="true"># else:</span><span class="token comment" spellcheck="true">#     print("you are very good")</span><span class="token comment" spellcheck="true"># print("hhhhhhhhh")</span><span class="token comment" spellcheck="true"># salary = int(input("输入你的工资："))</span><span class="token comment" spellcheck="true"># if salary &lt;= 1000:</span><span class="token comment" spellcheck="true">#     print("老板我是你爹")</span><span class="token comment" spellcheck="true"># elif salary >= 1000 and salary &lt;= 2000:</span><span class="token comment" spellcheck="true">#     print("老板，wqnmlgbxxxx")</span><span class="token comment" spellcheck="true"># elif salary >= 2000 and salary &lt;= 5000:</span><span class="token comment" spellcheck="true">#     print("老板脑子有坑，背后说坏话")</span><span class="token comment" spellcheck="true"># elif salary >= 5000 and salary &lt;= 10000:</span><span class="token comment" spellcheck="true">#     print("老板说的有点问题，但我不说话")</span><span class="token comment" spellcheck="true"># elif salary >= 10000 and salary &lt;= 20000:</span><span class="token comment" spellcheck="true">#     print("老板说啥就是啥吧")</span><span class="token comment" spellcheck="true"># elif salary >= 20000 and salary &lt;= 30000:</span><span class="token comment" spellcheck="true">#     print("老板说什么都是对的，如果有人错了，那一定是我")</span><span class="token comment" spellcheck="true"># elif salary >= 30000 and salary &lt;= 50000:</span><span class="token comment" spellcheck="true">#     print("996就像呼吸一样自然")</span><span class="token comment" spellcheck="true"># else:</span><span class="token comment" spellcheck="true">#     print("公司就是我家")</span>Mark <span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"成绩："</span><span class="token punctuation">))</span><span class="token keyword">if</span> Mark <span class="token operator">></span> 90  <span class="token keyword">:</span>    print<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">></span> 80:    print<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">></span> 60:    print<span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">></span> 40:    print<span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> Mark <span class="token operator">>=</span> 0:    print<span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span>else:    print<span class="token punctuation">(</span><span class="token string">"输入错误"</span><span class="token punctuation">)</span></code></pre><ul><li><h2 id="数字类型（int）"><a href="#数字类型（int）" class="headerlink" title="数字类型（int）"></a>数字类型（int）</h2></li></ul><ul><li><h2 id="字符串方法-str"><a href="#字符串方法-str" class="headerlink" title="字符串方法(str)"></a>字符串方法(str)</h2></li></ul><pre class=" language-bash"><code class="language-bash">a <span class="token operator">=</span> <span class="token string">"Onesidepass"</span>print<span class="token punctuation">(</span>a.center<span class="token punctuation">(</span>50,<span class="token string">"-"</span><span class="token punctuation">))</span>      <span class="token comment" spellcheck="true">#输出：-------------------Onesidepass--------------------</span>print<span class="token punctuation">(</span>a.count<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">))</span>          <span class="token comment" spellcheck="true">#输出：字符串中“s”出现的次数   output：3</span>print<span class="token punctuation">(</span>a.count<span class="token punctuation">(</span><span class="token string">"s"</span>,0,4<span class="token punctuation">))</span>      <span class="token comment" spellcheck="true">#局部搜索，顾头不顾尾</span><span class="token comment" spellcheck="true">#encode</span>print<span class="token punctuation">(</span>a.endswith<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">))</span>       <span class="token comment" spellcheck="true">#判断结尾是否为 s 结尾 output：true</span>print<span class="token punctuation">(</span>a.startswith<span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">))</span>     <span class="token comment" spellcheck="true">#判断开头</span>print<span class="token punctuation">(</span>a.find<span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">))</span>           <span class="token comment" spellcheck="true">#查找，找不到返回-1 找到返回索引值</span>print<span class="token punctuation">(</span>a.isdigit<span class="token punctuation">(</span><span class="token punctuation">))</span>print<span class="token punctuation">(</span><span class="token string">"22"</span>.isdigit<span class="token punctuation">(</span><span class="token punctuation">))</span>        <span class="token comment" spellcheck="true">#判断是否为整数</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"OSP"</span>,<span class="token string">"UMR"</span>,<span class="token string">"STF"</span><span class="token punctuation">]</span>print<span class="token punctuation">(</span><span class="token string">"-"</span>.join<span class="token punctuation">(</span>l<span class="token punctuation">))</span>          <span class="token comment" spellcheck="true">#拼接字符串 OSP-UMR-STF</span>print<span class="token punctuation">(</span>a.replace<span class="token punctuation">(</span><span class="token string">"s"</span>,<span class="token string">"d"</span>,2<span class="token punctuation">))</span>       <span class="token comment" spellcheck="true">#print(a.replace(old,new,count))  字符串替换</span>b <span class="token operator">=</span> <span class="token string">"OSP UMR STF"</span>print<span class="token punctuation">(</span>b.split<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token comment" spellcheck="true">#字符串转成列表，默认用空格来分   ['OSP', 'UMR', 'STF']</span>print<span class="token punctuation">(</span>b.split<span class="token punctuation">(</span><span class="token string">"P"</span>,1<span class="token punctuation">))</span>       <span class="token comment" spellcheck="true">#按什么来分，分几次 ['OS', ' UMR STF']</span></code></pre><ul><li>output: </li></ul><pre class=" language-bash"><code class="language-bash">-------------------Onesidepass--------------------31TrueFalse1FalseTrueOSP-UMR-STFOnedidepads<span class="token punctuation">[</span><span class="token string">'OSP'</span>, <span class="token string">'UMR'</span>, <span class="token string">'STF'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'OS'</span>, <span class="token string">' UMR STF'</span><span class="token punctuation">]</span></code></pre><ul><li><h3 id="公司员工抽奖小程序"><a href="#公司员工抽奖小程序" class="headerlink" title="公司员工抽奖小程序"></a>公司员工抽奖小程序</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> random<span class="token function">import</span> stringstaffs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                       <span class="token comment" spellcheck="true">#空列表用于存储员工</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>1,301<span class="token punctuation">)</span>:            <span class="token comment" spellcheck="true">#1-300 （for循环）</span>    staffs.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#将1-300分别存入空列表</span>c <span class="token operator">=</span> random.sample<span class="token punctuation">(</span>staffs,30<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#c为三等奖随机抽取的变量</span>print<span class="token punctuation">(</span>f<span class="token string">"三等奖获奖的员工分别为：{c}"</span><span class="token punctuation">)</span><span class="token keyword">if</span> c <span class="token keyword">in</span> staffs:    staffs.remove<span class="token punctuation">(</span>c<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#remove 删除了三等奖的员工，剩下的是未获奖的员工</span>b <span class="token operator">=</span> random.sample<span class="token punctuation">(</span>staffs,6<span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">'二等奖获奖的员工分别为：{b}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> b <span class="token keyword">in</span> staffs:    staffs.remove<span class="token punctuation">(</span>b<span class="token punctuation">)</span>a <span class="token operator">=</span> random.sample<span class="token punctuation">(</span>staffs,3<span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">'一等奖获奖的员工分别为：{a}'</span><span class="token punctuation">)</span></code></pre><ul><li>output：<pre class=" language-bash"><code class="language-bash">三等奖获奖的员工分别为：<span class="token punctuation">[</span>270, 252, 263, 219, 171, 180, 140, 106, 6, 241, 163, 118, 192, 88, 123, 44, 255, 207, 300, 226, 268, 11, 147, 187, 111, 202, 119, 165, 190, 4<span class="token punctuation">]</span>二等奖获奖的员工分别为：<span class="token punctuation">[</span>254, 184, 282, 236, 92, 109<span class="token punctuation">]</span>一等奖获奖的员工分别为：<span class="token punctuation">[</span>166, 77, 233<span class="token punctuation">]</span></code></pre></li></ul><ul><li><h3 id="奇偶数"><a href="#奇偶数" class="headerlink" title="奇偶数"></a>奇偶数</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>100<span class="token punctuation">)</span>:    <span class="token keyword">if</span> i % 2 <span class="token operator">==</span> 0:        print<span class="token punctuation">(</span>f<span class="token string">"{i}is 偶数"</span><span class="token punctuation">)</span>    else:        print<span class="token punctuation">(</span>f<span class="token string">"{i}is 奇数"</span><span class="token punctuation">)</span></code></pre><ul><li><h3 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>1,10<span class="token punctuation">)</span>:    <span class="token comment" spellcheck="true">#print(f"{i}x1={i}")</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>1,i+1<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span>f<span class="token string">"{i}x{j}={i*j}"</span>,end<span class="token operator">=</span><span class="token string">"  "</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>#</p><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash">1x1<span class="token operator">=</span>1  2x1<span class="token operator">=</span>2  2x2<span class="token operator">=</span>4  3x1<span class="token operator">=</span>3  3x2<span class="token operator">=</span>6  3x3<span class="token operator">=</span>9  4x1<span class="token operator">=</span>4  4x2<span class="token operator">=</span>8  4x3<span class="token operator">=</span>12  4x4<span class="token operator">=</span>16  5x1<span class="token operator">=</span>5  5x2<span class="token operator">=</span>10  5x3<span class="token operator">=</span>15  5x4<span class="token operator">=</span>20  5x5<span class="token operator">=</span>25  6x1<span class="token operator">=</span>6  6x2<span class="token operator">=</span>12  6x3<span class="token operator">=</span>18  6x4<span class="token operator">=</span>24  6x5<span class="token operator">=</span>30  6x6<span class="token operator">=</span>36  7x1<span class="token operator">=</span>7  7x2<span class="token operator">=</span>14  7x3<span class="token operator">=</span>21  7x4<span class="token operator">=</span>28  7x5<span class="token operator">=</span>35  7x6<span class="token operator">=</span>42  7x7<span class="token operator">=</span>49  8x1<span class="token operator">=</span>8  8x2<span class="token operator">=</span>16  8x3<span class="token operator">=</span>24  8x4<span class="token operator">=</span>32  8x5<span class="token operator">=</span>40  8x6<span class="token operator">=</span>48  8x7<span class="token operator">=</span>56  8x8<span class="token operator">=</span>64  9x1<span class="token operator">=</span>9  9x2<span class="token operator">=</span>18  9x3<span class="token operator">=</span>27  9x4<span class="token operator">=</span>36  9x5<span class="token operator">=</span>45  9x6<span class="token operator">=</span>54  9x7<span class="token operator">=</span>63  9x8<span class="token operator">=</span>72  9x9<span class="token operator">=</span>81 </code></pre><ul><li><h3 id="京牌摇号"><a href="#京牌摇号" class="headerlink" title="京牌摇号"></a>京牌摇号</h3></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> string<span class="token function">import</span> randomcount <span class="token operator">=</span> 0              <span class="token comment" spellcheck="true">#计数器</span>car_nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true">#空集合存数据</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> 4:    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>20<span class="token punctuation">)</span>:        n1 <span class="token operator">=</span> random.choice<span class="token punctuation">(</span>string.ascii_uppercase<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机选取里面的任意一个对象</span>        n2 <span class="token operator">=</span> <span class="token string">""</span>.join<span class="token punctuation">(</span>random.sample<span class="token punctuation">(</span>string.ascii_uppercase + string.digits, 5<span class="token punctuation">))</span>        c_num <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token string">"京{n1}-{n2}"</span><span class="token punctuation">)</span>        car_nums.append<span class="token punctuation">(</span>c_num<span class="token punctuation">)</span>        print<span class="token punctuation">(</span>c_num,end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> 4 or i <span class="token operator">==</span> 9 or i <span class="token operator">==</span> 14  <span class="token keyword">:</span>    <span class="token comment" spellcheck="true">#换行模块</span>            print<span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">#换行模块</span>    print<span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment" spellcheck="true">#换行模块</span>    choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你选择的车牌,如不满意请输入no:"</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#strip 方法去掉头尾空格及特殊字符</span>    <span class="token keyword">if</span> choice <span class="token keyword">in</span> car_nums:        print<span class="token punctuation">(</span>f<span class="token string">"恭喜您喜提新车牌：{choice}"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    else:        <span class="token keyword">if</span> count <span class="token operator">&lt;</span> 3:            print<span class="token punctuation">(</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span><span class="token string">"-------------------抱歉请重试-------------------"</span><span class="token punctuation">)</span>            print<span class="token punctuation">(</span><span class="token punctuation">)</span>    count +<span class="token operator">=</span> count + 1                         <span class="token comment" spellcheck="true">#计数器</span>choice2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> choice2 not <span class="token keyword">in</span> car_nums:                 <span class="token comment" spellcheck="true">#死循环</span>    choice2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"三次选择结束请选择车牌："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">"恭喜您喜提新车牌： {choice2}！！！"</span><span class="token punctuation">)</span></code></pre><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash">京L-L45OI 京I-KQAW4 京A-0K54N 京D-JROTH 京Z-L08YE 京H-KUDF9 京N-B93G4 京B-FIY7C 京E-7LTNH 京M-FHBEM 京H-UCYFI 京D-MDYXV 京E-031IO 京S-H3I7E 京X-F2IU1 京Z-WRG7Y 京U-V0TC3 京U-NR83I 京I-2YB4V 京U-M54GU 请输入你选择的车牌,如不满意请输入no:no-------------------抱歉请重试-------------------京Q-PV85K 京G-59SLJ 京X-C3Z0R 京P-EGOUV 京R-RI2L8 京C-62XPO 京X-48E7C 京L-K75JZ 京I-ZJ68Q 京L-NCRQP 京T-5NMXU 京N-XHMVK 京J-6X7D0 京Q-8O1CW 京D-QHLTS 京Q-9BNH4 京R-PAJ3T 京H-LWUPY 京A-UYPOW 京W-3PLG2 请输入你选择的车牌,如不满意请输入no:ajd<span class="token punctuation">;</span>flasd-------------------抱歉请重试-------------------京G-FB54N 京J-OGATN 京M-SE7KZ 京N-P5RQA 京L-FKN02 京X-KG0UD 京O-TC3PA 京U-FR7EG 京E-L6WZA 京S-01KWE 京P-JTMG7 京S-M7PLN 京K-E14CX 京O-02MBE 京I-YUP83 京W-GVSXB 京B-DR1C5 京T-6POX3 京A-MSKX9 京G-KB3TQ 请输入你选择的车牌,如不满意请输入no:adsfjal<span class="token punctuation">;</span>fd三次选择结束请选择车牌：<span class="token punctuation">;</span>d<span class="token punctuation">;</span>asfjdka三次选择结束请选择车牌：    j   三次选择结束请选择车牌： 京L-FKN02 恭喜您喜提新车牌： 京L-FKN02！！！</code></pre><ul><li><h3 id="列表分类"><a href="#列表分类" class="headerlink" title="列表分类"></a>列表分类</h3></li></ul><pre class=" language-bash"><code class="language-bash">tu_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'hk'</span>,80<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'hy'</span>,79<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'kx'</span>,55<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'jc'</span>,89<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'fl'</span>,22<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'ks'</span>,44<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">'nb'</span>,99<span class="token punctuation">]</span><span class="token punctuation">]</span>new_stu_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#100 - 90</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#89  - 80</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#79 - 70</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#69 - 60</span>    <span class="token punctuation">[</span><span class="token punctuation">]</span>,    <span class="token comment" spellcheck="true">#59 - 0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> stu_list:    <span class="token keyword">if</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">>=</span> 90:        new_stu_list<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">>=</span> 80:        new_stu_list<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">>=</span> 70:        new_stu_list<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">elif</span> i<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">>=</span> 60:        new_stu_list<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    else:        new_stu_list<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>print<span class="token punctuation">(</span>new_stu_list<span class="token punctuation">)</span></code></pre><ul><li>效果：</li></ul><pre><code>[[[&#39;nb&#39;, 99]], [[&#39;hk&#39;, 80], [&#39;jc&#39;, 89]], [[&#39;hy&#39;, 79]], [], [[&#39;kx&#39;, 55], [&#39;fl&#39;, 22], [&#39;ks&#39;, 44]]]  </code></pre><ul><li><h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3></li></ul><pre class=" language-bash"><code class="language-bash">nam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'osp'</span>,<span class="token string">'stf'</span>,<span class="token string">'umr'</span>,<span class="token string">'xhk'</span>,<span class="token string">'yzs'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#顾头不顾尾</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>1:3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#倒切</span>nam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'osp'</span>,<span class="token string">'stf'</span>,<span class="token string">'umr'</span>,<span class="token string">'xhk'</span>,<span class="token string">'yzs'</span><span class="token punctuation">]</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>-4:-3<span class="token punctuation">]</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>-3:-1<span class="token punctuation">]</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>-3:<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#步长（跳着切）name[start:end:step]#step 默认为1</span>print<span class="token punctuation">(</span>nam<span class="token punctuation">[</span>0:-1:2<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#stf 没了 跳过了  </span></code></pre><ul><li>output:</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'stf'</span>, <span class="token string">'umr'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'stf'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'umr'</span>, <span class="token string">'xhk'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'umr'</span>, <span class="token string">'xhk'</span>, <span class="token string">'yzs'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'osp'</span>, <span class="token string">'umr'</span><span class="token punctuation">]</span>  </code></pre><ul><li><h3 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h3></li></ul><pre class=" language-bash"><code class="language-bash">name <span class="token operator">=</span> <span class="token punctuation">{</span>                              <span class="token comment" spellcheck="true">#字典</span>    <span class="token string">"osp"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>22,<span class="token string">'student'</span>,1500<span class="token punctuation">]</span>,    <span class="token string">"佩奇"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>14,<span class="token string">"student"</span>,0<span class="token punctuation">]</span>,    <span class="token string">"umr"</span>  <span class="token keyword">:</span> <span class="token string">"好吃懒做"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#取值</span>print<span class="token punctuation">(</span><span class="token string">'字典  ： '</span>,name<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'取值（依据key取出value） ：     '</span>,name<span class="token punctuation">[</span><span class="token string">"umr"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#增加</span>name<span class="token punctuation">[</span><span class="token string">"tsf"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"活泼可爱"</span>print<span class="token punctuation">(</span><span class="token string">'增加 ：  '</span>,name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改</span>name<span class="token punctuation">[</span><span class="token string">"osp"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"帅气动人"</span>name<span class="token punctuation">[</span><span class="token string">"佩奇"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"古灵精怪"</span>print<span class="token punctuation">(</span><span class="token string">'修改 ：  '</span>,name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除</span>del name<span class="token punctuation">[</span><span class="token string">"佩奇"</span><span class="token punctuation">]</span>name.pop<span class="token punctuation">(</span><span class="token string">"tsf"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'删除 ：  '</span>,name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清空</span>name.clear<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'清空 ：  '</span>,name<span class="token punctuation">)</span>  </code></pre><ul><li>output:  <pre class=" language-bash"><code class="language-bash">字典  ：  <span class="token punctuation">{</span><span class="token string">'osp'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>22, <span class="token string">'student'</span>, 1500<span class="token punctuation">]</span>, <span class="token string">'佩奇'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>14, <span class="token string">'student'</span>, 0<span class="token punctuation">]</span>, <span class="token string">'umr'</span><span class="token keyword">:</span> <span class="token string">'好吃懒做'</span><span class="token punctuation">}</span>取值（依据key取出value） ：      好吃懒做增加 ：   <span class="token punctuation">{</span><span class="token string">'osp'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>22, <span class="token string">'student'</span>, 1500<span class="token punctuation">]</span>, <span class="token string">'佩奇'</span><span class="token keyword">:</span> <span class="token punctuation">[</span>14, <span class="token string">'student'</span>, 0<span class="token punctuation">]</span>, <span class="token string">'umr'</span><span class="token keyword">:</span> <span class="token string">'好吃懒做'</span>, <span class="token string">'tsf'</span><span class="token keyword">:</span> <span class="token string">'活泼可爱'</span><span class="token punctuation">}</span>修改 ：   <span class="token punctuation">{</span><span class="token string">'osp'</span><span class="token keyword">:</span> <span class="token string">'帅气动人'</span>, <span class="token string">'佩奇'</span><span class="token keyword">:</span> <span class="token string">'古灵精怪'</span>, <span class="token string">'umr'</span><span class="token keyword">:</span> <span class="token string">'好吃懒做'</span>, <span class="token string">'tsf'</span><span class="token keyword">:</span> <span class="token string">'活泼可爱'</span><span class="token punctuation">}</span>删除 ：   <span class="token punctuation">{</span><span class="token string">'osp'</span><span class="token keyword">:</span> <span class="token string">'帅气动人'</span>, <span class="token string">'umr'</span><span class="token keyword">:</span> <span class="token string">'好吃懒做'</span><span class="token punctuation">}</span>清空 ：   <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="字典详细操作"><a href="#字典详细操作" class="headerlink" title="字典详细操作"></a>字典详细操作</h3><pre class=" language-bash"><code class="language-bash">name <span class="token operator">=</span> <span class="token punctuation">{</span>                              <span class="token comment" spellcheck="true">#字典</span>    <span class="token string">"osp"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>22,<span class="token string">'student'</span>,1500<span class="token punctuation">]</span>,    <span class="token string">"佩奇"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>14,<span class="token string">"student"</span>,0<span class="token punctuation">]</span>,    <span class="token string">"umr"</span>  <span class="token keyword">:</span> <span class="token string">"好吃懒做"</span><span class="token punctuation">}</span>name.keys<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#列表形式列出key</span>print<span class="token punctuation">(</span>name.keys<span class="token punctuation">(</span><span class="token punctuation">))</span>name.values<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#列出value</span>print<span class="token punctuation">(</span>name.values<span class="token punctuation">(</span><span class="token punctuation">))</span>name.items<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#以元组的形式列出key：value</span>print<span class="token punctuation">(</span>name.items<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token keyword">for</span> k,v <span class="token keyword">in</span> name.items<span class="token punctuation">(</span><span class="token punctuation">)</span>:    print<span class="token punctuation">(</span>k,v<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出：</span><span class="token comment" spellcheck="true"># osp [22, 'student', 1500]</span><span class="token comment" spellcheck="true"># 佩奇 [14, 'student', 0]</span><span class="token comment" spellcheck="true"># umr 好吃懒做</span><span class="token keyword">for</span> i <span class="token keyword">in</span> name:    print<span class="token punctuation">(</span>i,name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># osp [22, 'student', 1500]</span><span class="token comment" spellcheck="true"># 佩奇 [14, 'student', 0]</span><span class="token comment" spellcheck="true"># umr 好吃懒做</span>print<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#{'osp': [22, 'student', 1500], '佩奇': [14, 'student', 0], 'umr': '好吃懒做'}</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#求长度</span>print<span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">))</span>  <span class="token comment" spellcheck="true">#3</span><span class="token comment" spellcheck="true">#len 方法是全局的，也可判断列表，字符串的长度 数字不行  解释器自带函数</span>len<span class="token punctuation">(</span><span class="token string">"osp"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">"osp"</span><span class="token punctuation">))</span> <span class="token comment" spellcheck="true">#3</span>name<span class="token punctuation">[</span><span class="token string">'jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'salary'</span><span class="token keyword">:</span> 2000,<span class="token string">'age'</span><span class="token keyword">:</span> 21 <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#字典增加 嵌套</span>print<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#{'osp': [22, 'student', 1500], '佩奇': [14, 'student', 0], 'umr': '好吃懒做', 'jack': {'salary': 2000, 'age': 21}}</span><span class="token comment" spellcheck="true">#嵌套字典取值</span>print<span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token string">'jack'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2000</span></code></pre><h2 id="dict-类型-复制-copy-方法使用注意事项"><a href="#dict-类型-复制-copy-方法使用注意事项" class="headerlink" title="dict 类型 复制.copy()方法使用注意事项"></a>dict 类型 复制.copy()方法使用注意事项</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>english1 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token keyword">:</span><span class="token string">"我们"</span>,    <span class="token string">"world"</span><span class="token keyword">:</span><span class="token string">"世界"</span>,    <span class="token string">"company"</span><span class="token keyword">:</span> <span class="token string">"公司"</span>,<span class="token punctuation">}</span>english2 <span class="token operator">=</span> english1english3 <span class="token operator">=</span> english1.copy<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english1"</span>,english1<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english2"</span>,english2<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english3"</span>,english3<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"change english2"</span><span class="token punctuation">)</span>english2<span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"城市"</span>print<span class="token punctuation">(</span><span class="token string">"english1"</span>,english1<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english2"</span>,english2<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english3"</span>,english3<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"change english3"</span><span class="token punctuation">)</span>english3<span class="token punctuation">[</span><span class="token string">"school"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"学校"</span>print<span class="token punctuation">(</span><span class="token string">"english1"</span>,english1<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english2"</span>,english2<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"english3"</span>,english3<span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-bash"><code class="language-bash">english1 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span><span class="token punctuation">}</span>english2 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span><span class="token punctuation">}</span>english3 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span><span class="token punctuation">}</span>--------------------------change english2english1 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span>, <span class="token string">'city'</span><span class="token keyword">:</span> <span class="token string">'城市'</span><span class="token punctuation">}</span>english2 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span>, <span class="token string">'city'</span><span class="token keyword">:</span> <span class="token string">'城市'</span><span class="token punctuation">}</span>english3 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span><span class="token punctuation">}</span>--------------------------change english3english1 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span>, <span class="token string">'city'</span><span class="token keyword">:</span> <span class="token string">'城市'</span><span class="token punctuation">}</span>english2 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span>, <span class="token string">'city'</span><span class="token keyword">:</span> <span class="token string">'城市'</span><span class="token punctuation">}</span>english3 <span class="token punctuation">{</span><span class="token string">'we'</span><span class="token keyword">:</span> <span class="token string">'我们'</span>, <span class="token string">'world'</span><span class="token keyword">:</span> <span class="token string">'世界'</span>, <span class="token string">'company'</span><span class="token keyword">:</span> <span class="token string">'公司'</span>, <span class="token string">'school'</span><span class="token keyword">:</span> <span class="token string">'学校'</span><span class="token punctuation">}</span></code></pre><p>从例子的执行结果可以看出，使用copy方法对获取到的字典做修改，原始的字典不受影响。<br>使用copy方法就像重新写了一个新的字典，只是元素恰巧和原来的字典相同。<br>注意copy进行拷贝是浅拷贝，如果字典的元素值也是字典，那么copy方法只会影响<br>最外层的字典，元素内部还是引用。可以用 <em>深拷贝</em> 解决此类问题。<br>例子：</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>copy.copy<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print c<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alist.append<span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print c<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.append<span class="token punctuation">(</span><span class="token string">'cccc'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print c<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'cccc'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'cccc'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#里面的子对象被改变了</span></code></pre><p>深拷贝，包含对象里面的自对象的拷贝，所以原始对象的改变不会造成深拷贝里任何子元素的改变  </p><pre class=" language-bash"><code class="language-bash"> d<span class="token operator">=</span>copy.deepcopy<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print d<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#始终没有改变</span><span class="token operator">>></span><span class="token operator">></span> alist.append<span class="token punctuation">(</span>5<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print d<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#始终没有改变</span><span class="token operator">>></span><span class="token operator">></span> alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> alist<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.append<span class="token punctuation">(</span><span class="token string">"ccccc"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> print alist<span class="token punctuation">;</span>print d<span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span>, <span class="token string">'ccccc'</span><span class="token punctuation">]</span>, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, <span class="token punctuation">[</span><span class="token string">'a'</span>, <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#始终没有改变</span></code></pre><p>浅拷贝与深拷贝的本质原因：重新开辟内存来存储<br>review:#字符串类型是不可变的<br>#list是可变的，</p><h3 id="浅拷贝："><a href="#浅拷贝：" class="headerlink" title="浅拷贝："></a>浅拷贝：</h3><pre class=" language-bash"><code class="language-bash">print<span class="token punctuation">(</span><span class="token string">"浅拷贝："</span><span class="token punctuation">)</span><span class="token function">import</span> copyb<span class="token operator">=</span><span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span>print<span class="token punctuation">(</span><span class="token string">"id b:"</span>,id<span class="token punctuation">(</span>b<span class="token punctuation">))</span>h<span class="token operator">=</span>copy.copy<span class="token punctuation">(</span>b<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"id h"</span>,id<span class="token punctuation">(</span>h<span class="token punctuation">))</span>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span>h.append<span class="token punctuation">(</span>6<span class="token punctuation">)</span>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">"id h"</span>,id<span class="token punctuation">(</span>h<span class="token punctuation">))</span>print<span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#浅拷贝新的列表h改变了，原来的b没变。</span>b<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'n'</span>   <span class="token comment" spellcheck="true">#列表元素改变后，新的列表也没变</span>print<span class="token punctuation">(</span>h<span class="token punctuation">)</span>输出：浅拷贝：<span class="token punctuation">(</span><span class="token string">'id b:'</span>, 140165805110552<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'id h'</span>, 140165805110480<span class="token punctuation">)</span><span class="token punctuation">[</span>1, 2, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'id h'</span>, 140165805110480<span class="token punctuation">)</span><span class="token punctuation">[</span>1, 2, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span></code></pre><pre class=" language-bash"><code class="language-bash">a <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span>3, 4, a<span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy.copy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>a<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> 11print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>输出：<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span>140624327425704140624326197400140624327425704140624326197400<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>11, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>11, 2<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20190523210140203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1ZmVuZ3pq,size_16,color_FFFFFF,t_70" alt=""><br>可以看出浅拷贝，相当于只拷贝了一层，到a那里，a变化了，其值也就变化了。<br>Python中有多种方式实现浅拷贝，copy模块的copy函数、对象的copy函数、工厂方法、切片等；大多数情况下，编写程序时都是使用浅拷贝，除非有特定的需求；浅拷贝的优点：拷贝速度快，占用空间少，拷贝效率高。  </p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝:"></a>深拷贝:</h3><p>区别于浅拷贝只拷贝顶层引用，深拷贝会逐层进行拷贝，直到拷贝的所有引用都是不可变引用为止<br><img src="https://img-blog.csdnimg.cn/20190523210602950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2J1ZmVuZ3pq,size_16,color_FFFFFF,t_70" alt=""></p><pre class=" language-bash"><code class="language-bash">a <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span>3, 4, a<span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy.deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>a<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> 11print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l1<span class="token punctuation">))</span>print<span class="token punctuation">(</span>id<span class="token punctuation">(</span>l2<span class="token punctuation">))</span>print<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>print<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>输出：<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span>140673014398488140672779715720140673014398488140672779715720<span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>11, 2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>1, 2<span class="token punctuation">]</span><span class="token punctuation">]</span> </code></pre><p><em>为什么Python默认的拷贝方式是浅拷贝？</em></p><ul><li><p>时间角度：浅拷贝花费时间更少；</p></li><li><p>空间角度：浅拷贝花费内存更少；</p></li><li><p>效率角度：浅拷贝只拷贝顶层数据，一般情况下比深拷贝效率高。  </p></li></ul><h2 id="登录and注册小程序"><a href="#登录and注册小程序" class="headerlink" title="登录and注册小程序"></a>登录and注册小程序</h2><p> 实现效果：</p><ul><li>登录唯一用户</li><li>输错3次锁定账号</li><li>注册唯一用户，密码位数6-16位</li><li>密码校验两次</li></ul><p>account.db (作为用户数据库)</p><pre class=" language-bash"><code class="language-bash">osp,123456abc,0stf,qazwsx123,0umr,123123abab,0</code></pre><p>登录：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#  -*- coding: utf-8  -*-</span><span class="token comment" spellcheck="true"># 1.先做一个字典存用户数据</span>accounts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 2.将文档用户数据写入字典</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"account.db"</span>,<span class="token string">"r"</span>,encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f <span class="token keyword">:</span>    line <span class="token operator">=</span> line.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    accounts<span class="token punctuation">[</span>line<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token comment" spellcheck="true"># print(accounts)</span><span class="token comment" spellcheck="true"># 3.搞个 loop 要求用户输入信息去判断</span>print<span class="token punctuation">(</span><span class="token string">"-----用户登录-----"</span><span class="token punctuation">)</span><span class="token keyword">while</span> True:                              <span class="token comment" spellcheck="true">#判断用户名状态</span>    user <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> user not <span class="token keyword">in</span> accounts:        print<span class="token punctuation">(</span><span class="token string">"用户名不存在，请重新输入。。。"</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">elif</span>  accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token keyword">:</span>        print<span class="token punctuation">(</span>f<span class="token string">"{user}此账户已被锁定，请联系管理员。。。"</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    count <span class="token operator">=</span> 0    <span class="token keyword">while</span> count <span class="token operator">&lt;</span> 3:                      <span class="token comment" spellcheck="true">#控制密码（判断密码正确否，三次锁定）</span>        password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> password <span class="token operator">==</span>  accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>:            print<span class="token punctuation">(</span>f<span class="token string">"welcome'{user}'...登入成功。。。"</span><span class="token punctuation">)</span>        else:            print<span class="token punctuation">(</span><span class="token string">"密码输入错误请重试。。。"</span><span class="token punctuation">)</span>        count +<span class="token operator">=</span> 1    <span class="token keyword">if</span> count <span class="token operator">==</span> 3 and password <span class="token operator">!=</span> accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token keyword">:</span>   <span class="token comment" spellcheck="true">#小bug，就是输错两次，第三次正确也会锁号</span>        print<span class="token punctuation">(</span>f<span class="token string">"输错了{count}次密码，账号{user}已锁定。。。"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#必须补充条件</span>        <span class="token comment" spellcheck="true"># 1.先改在内存中dict 账号信息的用户状态</span>        <span class="token comment" spellcheck="true"># 2.把dict里的数据转成原account.db数据格式，并存回文件</span>        accounts<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span>        f_new <span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"account.db"</span>,<span class="token string">"w"</span>,<span class="token punctuation">)</span>        <span class="token keyword">for</span> user,val <span class="token keyword">in</span> accounts.items<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token comment" spellcheck="true">#字典转列表</span>            line <span class="token operator">=</span> <span class="token string">","</span>.join<span class="token punctuation">(</span>val<span class="token punctuation">)</span> + <span class="token string">"\n"</span>  <span class="token comment" spellcheck="true">#把列表再转成字符</span>            f_new.write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        f_new.close<span class="token punctuation">(</span><span class="token punctuation">)</span>    else:        pass        exit<span class="token punctuation">(</span><span class="token string">"bye..."</span><span class="token punctuation">)</span></code></pre><p>注册：</p><pre class=" language-bash"><code class="language-bash">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"account.db"</span>, mode<span class="token operator">=</span><span class="token string">"a+"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># a+ 模式光标默认放置在末尾，太艹了，卡了好久</span>f.seek<span class="token punctuation">(</span>0<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#将光标移至开头</span>accounts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#空字典存数据</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f <span class="token keyword">:</span>             <span class="token comment" spellcheck="true">#将数据从文件读到字典（也就是加载到内存）</span>    line <span class="token operator">=</span> line.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    accounts<span class="token punctuation">[</span>line<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token comment" spellcheck="true">#print(accounts)</span>print<span class="token punctuation">(</span><span class="token string">"------用户注册------"</span><span class="token punctuation">)</span>user <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token keyword">while</span> f<span class="token string">"{user}"</span> <span class="token keyword">in</span> accounts.keys<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token comment" spellcheck="true">#比对用户名是否重复</span>    print<span class="token punctuation">(</span><span class="token string">"用户名已存在请重试..."</span><span class="token punctuation">)</span>    user <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">"用户名为：{user}"</span><span class="token punctuation">)</span>password <span class="token operator">=</span> Nonepassword2 <span class="token operator">=</span> <span class="token string">"None@!<span class="token variable">$@#@</span>$<span class="token variable">$##</span>%$%#"</span><span class="token keyword">while</span> password <span class="token operator">!=</span> password2:            <span class="token comment" spellcheck="true">#二次输入验证</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> 6 or len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">></span> 16:   <span class="token comment" spellcheck="true">#字数限制</span>        print<span class="token punctuation">(</span><span class="token string">"不符合密码规范请重新输入（6-16个字或拼音）"</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    password2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请再次输入密码："</span><span class="token punctuation">)</span>.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> password <span class="token operator">!=</span> password2:        print<span class="token punctuation">(</span><span class="token string">"两次输入的密码不相同请重试。。。"</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>f<span class="token string">"恭喜您注册成功...用户名为：{user}"</span><span class="token punctuation">)</span>data_base <span class="token operator">=</span> f<span class="token string">"{user},{password2},0"</span>f.write<span class="token punctuation">(</span>f<span class="token string">"\n{data_base}"</span><span class="token punctuation">)</span>f.close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧妙使用ffmpeg扒网络视频</title>
      <link href="/posts/36835.html"/>
      <url>/posts/36835.html</url>
      
        <content type="html"><![CDATA[<h1 id="巧妙使用ffmpeg扒网络视频"><a href="#巧妙使用ffmpeg扒网络视频" class="headerlink" title="巧妙使用ffmpeg扒网络视频"></a>巧妙使用ffmpeg扒网络视频</h1><ul><li><h2 id="1-首先当然需要idm-下载地址"><a href="#1-首先当然需要idm-下载地址" class="headerlink" title="1 首先当然需要idm 下载地址"></a>1 首先当然需要idm <a href="https://wwa.lanzous.com/iwna1ei5j7i" target="_blank" rel="noopener">下载地址</a></h2><h3 id="压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件"><a href="#压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件" class="headerlink" title="压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件"></a>压缩包解压后打开文件夹，然后点击绿化文件依照指示操作安装浏览器插件</h3><p><img src="http://fp1.fghrsh.net/2020/07/11/ec10c137e1d02272899792a385e17416.png" alt=""></p><h3 id="如未完成插件安装也可手动到相应浏览器自行安装插件"><a href="#如未完成插件安装也可手动到相应浏览器自行安装插件" class="headerlink" title="如未完成插件安装也可手动到相应浏览器自行安装插件"></a>如未完成插件安装也可手动到相应浏览器自行安装插件</h3><h3 id="下面为win10自带浏览器以及Google浏览器示例："><a href="#下面为win10自带浏览器以及Google浏览器示例：" class="headerlink" title="下面为win10自带浏览器以及Google浏览器示例："></a>下面为win10自带浏览器以及Google浏览器示例：</h3><p> 右上角找到相应插件管理<br><img src="http://fp1.fghrsh.net/2020/07/11/51bc220924a2d7b6f6d1d66657506f6b.png" alt=""><br> 勾选启用，如无插件请微软商城自行下载<br><img src="http://fp1.fghrsh.net/2020/07/11/4a8481f27892077205930e2e3b053d40.png" alt=""><br>Google相同<br><img src="http://fp1.fghrsh.net/2020/07/11/39351bcf9732d32d9c85130fa48abb6f.png" alt=""><br><img src="http://fp1.fghrsh.net/2020/07/11/eeec30ea0a5451f9c3b5331dd7cdc14f.png" alt=""></p></li><li><h2 id="接着安装ffmpeg-下载地址"><a href="#接着安装ffmpeg-下载地址" class="headerlink" title="接着安装ffmpeg 下载地址"></a>接着安装ffmpeg <a href="https://wwa.lanzous.com/iHaEqei5l7a" target="_blank" rel="noopener">下载地址</a></h2><p>解压后将bin文件夹中三个.exe文件剪切至system32文件夹方便操作<br><img src="http://fp1.fghrsh.net/2020/07/11/5b2cbac2eff2b8c0380340552e1bfe19.png" alt=""><br><img src="http://fp1.fghrsh.net/2020/07/11/2eff8e9fda702f225a706e348e2f84d6.png" alt=""><br>最后再加上预览工具前期的准备工作就做好了 <a href="https://wwa.lanzous.com/ivYPDei6raf" target="_blank" rel="noopener">potplayer下载链接</a></p></li><li><h1 id="2-接下来以Google浏览器为例扒youku上的视频"><a href="#2-接下来以Google浏览器为例扒youku上的视频" class="headerlink" title="2. 接下来以Google浏览器为例扒youku上的视频"></a>2. 接下来以Google浏览器为例扒youku上的视频</h1><h2 id="1，右键点击检查进入控制台"><a href="#1，右键点击检查进入控制台" class="headerlink" title="1，右键点击检查进入控制台"></a>1，右键点击检查进入控制台</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/0086304a3735a9c062cd341b1c5e132e.png" alt=""><br><img src="http://fp1.fghrsh.net/2020/07/11/6509a948076c896c7b32c4c21d18bb4d.png" alt=""> </p><h2 id="2，在network中搜索-appinfo-（尝试刷新）抓取json包，复制响应数据"><a href="#2，在network中搜索-appinfo-（尝试刷新）抓取json包，复制响应数据" class="headerlink" title="2，在network中搜索 appinfo （尝试刷新）抓取json包，复制响应数据"></a>2，在network中搜索 appinfo （尝试刷新）抓取json包，复制响应数据</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/ee7544c7f982556149ae9152bb03ebee.png" alt=""> </p><h2 id="3，-打开idm选择从剪贴板中批量下载"><a href="#3，-打开idm选择从剪贴板中批量下载" class="headerlink" title="3， 打开idm选择从剪贴板中批量下载"></a>3， 打开idm选择从剪贴板中批量下载</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/4244a703c3b8551ef09a4aed55f7770e.png" alt=""> </p><h2 id="4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址"><a href="#4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址" class="headerlink" title="4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址"></a>4，可以看见有多个M3U8链接，分别对应不同清晰度，我们只需要点击编辑复制下载地址</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/ce433e104269e9fb34ad118fc7a10392.png" alt=""><br><img src="http://fp1.fghrsh.net/2020/07/11/7c469422a51c5af0b4ac3c0ee48f46d4.png" alt=""></p><h2 id="5，potplayer预览查看是否为自己需要的清晰度"><a href="#5，potplayer预览查看是否为自己需要的清晰度" class="headerlink" title="5，potplayer预览查看是否为自己需要的清晰度"></a>5，potplayer预览查看是否为自己需要的清晰度</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/532a6755d1f2f931d15147a1f8b5f620.png" alt=""><br><img src="http://fp1.fghrsh.net/2020/07/11/a6678aa8ca4755283158efa844a8e005.png" alt=""></p></li></ul><h2 id="6-下载"><a href="#6-下载" class="headerlink" title="6,下载"></a>6,下载</h2><h2 id="win-R打开并运行cmd命令台调用ffmpeg下载视频"><a href="#win-R打开并运行cmd命令台调用ffmpeg下载视频" class="headerlink" title="win+R打开并运行cmd命令台调用ffmpeg下载视频"></a>win+R打开并运行cmd命令台调用ffmpeg下载视频</h2><p><img src="http://fp1.fghrsh.net/2020/07/11/1cb6f2a6fece96da1282fb5ced6124c6.png" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/07/11/2150dc3498a94bcb3c3b556f4f5c544b.png" alt=""></p><pre class=" language-bash"><code class="language-bash">$ ffmpeg -i <span class="token string">"地址” -c copy -f mp4 "</span>E:\test.mp4<span class="token string">" # 地址即为刚刚预览的M3U8链接，最后的为保存地址"</span>盘符:\文件名.mp4"</code></pre><p>回车运行下载<br>等待片刻<br><img src="http://fp1.fghrsh.net/2020/07/11/6e11536b4e791e2e9568bc40183256d5.png" alt=""></p><h3 id="停止后即可在保存位置查看下载好的视频"><a href="#停止后即可在保存位置查看下载好的视频" class="headerlink" title="停止后即可在保存位置查看下载好的视频"></a>停止后即可在保存位置查看下载好的视频</h3><p><img src="http://fp1.fghrsh.net/2020/07/11/d0c080645a70dce9ec16f188a95b2986.png" alt=""></p><h1 id="以上为全部内容，如有误欢迎在下方评论指出"><a href="#以上为全部内容，如有误欢迎在下方评论指出" class="headerlink" title="以上为全部内容，如有误欢迎在下方评论指出"></a>以上为全部内容，如有误欢迎在下方评论指出</h1><p><img src="http://fp1.fghrsh.net/2020/07/11/aca2264154a239670a109faacfad83e9.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青春ブタ野郎(mayiwolaopo)</title>
      <link href="/posts/45015.html"/>
      <url>/posts/45015.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://fp1.fghrsh.net/2020/05/24/cd2bf5d1169b1b3e3205e10b2b3b088a.png" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/23b4159f8c3283dc609b48eb0d03bed7.jpg" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/100e1ed9d77c59ca78733d1f221ac0af.jpg" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/daf3330b565ceeac52d941ac850a95bd.jpg" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/7873e7b3a4c173715ba00a1cecd17b7b.png" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/dd217dac2a436bb4019bac1db2accb42.png" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/b50a3a7adc07fbb288a0348450196a8d.jpg" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/10258bab6c7fadfad4f4c2cb7b803d8d.png" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/a20be8f1f14db97804440252588d7643.jpg" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/68bb9b5e5d33958f579a9a6bc67a9106.jpg" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/d30370b3caf623d88d93695081bd45a5.png" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/fd52c0042ddd07618f1b857d956a42a9.png" alt=""></p><p><img src="http://fp1.fghrsh.net/2020/05/24/68621d67e45195659f08aee25ec82bb5.png" alt=""></p><p><img src="" alt=""></p><p><img src="" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> “#樱岛麻衣#咲太#” </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.5.17 Pixiv每日排行榜精选</title>
      <link href="/posts/48781.html"/>
      <url>/posts/48781.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://fp1.fghrsh.net/2020/05/17/a07a719bcdb5a7d8acf2480f2e699c0d.png" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/185e0e5659757fe0b872246a1f722a62.png" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/f5a1aa30660f8663afa3385a380cfe4c.jpg" alt="">   </p><p><img src="https://fp1.fghrsh.net/2020/05/17/09bc777a0f2c4ddab9a3b0ac95e9ee64.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/3a7268241b0d28b4e7b8f160e5c8704a.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/22b7a47a6d67c2a93d8d1051f4de1630.png" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/fe8cd91a8d95e266a94ea4f0952e5394.png" alt="">   </p><p><img src="https://fp1.fghrsh.net/2020/05/17/6413a22d2dd7317abfbf4d116988d3f6.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/17/4e2557a25f14ec29ff86b6d78308317e.jpg" alt="">  </p><p><img src="http://fp1.fghrsh.net/2020/05/17/1cf47dd312517ddeb9cbd7b440e82476.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> p站美图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.5.16 Pixiv每日排行榜精选</title>
      <link href="/posts/24533.html"/>
      <url>/posts/24533.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://fp1.fghrsh.net/2020/05/16/85770b5a5bf17abe8113725a95062fcf.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/a51b934215f580c1382cbb6fe6de0dae.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/9e0dab5942f6182845374a825e020860.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/c945b56285fdd959d6a5af63cbe3c255.png" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/9f776512a3c66cebac9ae752909a020a.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/e742ca127576d3b5e9329f4640f98868.png" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/c3f526fe0e9e36ec99ff51a4dbf73b26.jpg" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/16/8cbc6742ce3170d6813cafd852b82dcc.png" alt="">  </p><p><img src="https://fp1.fghrsh.net/2020/05/09/547b9e02dadde0ebc8265f99138ceb61.png" alt="">  </p>]]></content>
      
      
      <categories>
          
          <category> p站美图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pixiv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请拒绝使用‘吸血雷’共建和谐P2P圈</title>
      <link href="/posts/49058.html"/>
      <url>/posts/49058.html</url>
      
        <content type="html"><![CDATA[<h1 id="推荐一款大佬配置好的BT下载器"><a href="#推荐一款大佬配置好的BT下载器" class="headerlink" title="推荐一款大佬配置好的BT下载器"></a>推荐一款大佬配置好的BT下载器</h1><ul><li><h2 id="正规BT客户端-qBittorrent使用教程原视频地址"><a href="#正规BT客户端-qBittorrent使用教程原视频地址" class="headerlink" title="正规BT客户端 qBittorrent使用教程原视频地址"></a>正规BT客户端 qBittorrent使用教程<a href="https://www.bilibili.com/video/BV1Qe411W7z5" target="_blank" rel="noopener">原视频地址</a></h2><h2 id="下载文件放在文章末尾，以下是粗略安装步骤："><a href="#下载文件放在文章末尾，以下是粗略安装步骤：" class="headerlink" title="下载文件放在文章末尾，以下是粗略安装步骤："></a>下载文件放在文章末尾，以下是粗略安装步骤：</h2><p><img src="https://preview.cloud.189.cn/image/imageAction?param=85D03BE33F0E13CD97F744BC98024E6E68C960911D49DB45D96C15BDE19ECD4309E448704C0C97C8BDD49E5D28F11D3B12240571EB0E104121FF5D31D6CD117D8E372766BB7BE111F288AD40B47CD5B8FA54653793D3EDCAE8E43AE7" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=66DCA23571FF7B1BA850C4A871060AB021C79DAB73FD14ABD3144A634CE22895D0A366AB4EFC0F96F8DA843E2CBB960729CE5F0ABD20F25F5DB06D9B53D253271EB6B73CA7FC3EFDEE44A8D9270F61149533258A426888A38B92547B" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=8A7C46961412C12C8264EC135D07021253FC55C36D2F0865D76FE695F4690F22C71F86E11D6843F6370F60271AD5EBD9259AB142CB70C66A79AC201CF2C3DB276B98E793F1E8FD04C156527944CEC841A4903312F744E99294189687" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=78093C9C37F4FF807950A00CB071CFBE8AAB1C0144A590A6F0444BF38B9F39E9DD1E3F8AB3F035B97DC809728DE0B4531255C8AE8691D2974FF4A26E51E025E940344E3D2F20414209C61697D95206CB21449C8C887EF964568E806A" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=D7ED04EDB296709960D7DD9F5C09D34D57514CBD2A30BC9A209DA35FA1D5EAC584B91B1637F5E918AEBCAADFBE50D980A9A86F112E2048F5E71D4A896B0C121BD166909FA789B676F8693F2E8F84212FC823F7C3B27C3D8E98F26CE2" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=A86DF544841E670DA56C730A63D82540A105C0CDB614CED9A3FB6675DD137FC710EA5B6A435E0473BF46E1CB39DA8E519AD4B92A3857119B967E06C6F935C0722A185C65DD469DB46A97C2372E739D318CDC21CFDE7C6AB59218384B" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=8BEC988C21B92C79A072918FFB8FD37C0D232BBFE7715E63D210401356AEE2B87CD22DB939208C3F1BCB14DB8C759F8D13D71C4979371DA3625974AAEEEE1E43A41C0DC513E8464510E645DCF802B553690A64CB14DF17E08FB50545" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=B2FA124BE94CE74DE81C4A6FE7A157C23CB90E106E4442823A0B592FB6613BBDBD38F9457603346378951883F0142D3DEF2E724CE79E84AA944F22196035156C4EF2C5370C78717D21BA6D09154323EA25DCE03E308CB2B8DC87C474" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=3F71FD5C961225C974E6BFF81E2425A22B559F1D89075C72CE2B43D6DFA11272FBC96814315C90F1027369FDB1DD862679EF1E0B5D2B53B7EB889639EF4C79A1CBA7FDAC0FED087E93E5CB5B794C00E86DE56745B64B3589C3D1C642" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=9D637FEC908CBFCFAA47EB82786FDB57206AD492AA10258C09E011F42CC001DEC1CB80003C98B4EC8CB60DE4F60EBC5E39D6BFC6A96672465451E5036FD233AF3E759DF7300B1A66FA40C379AF1D13EB149A5B98C6726E9B34B92CCE" alt=""><br><img src="https://preview.cloud.189.cn/image/imageAction?param=2E60E10D7CB82452F9FF81CE8C750EA0014F9DB0EB0B923FA0B7DF3B6FC99C15368F7BAE5BF2529FAD56EDA3207B954A0302DA8EFAB743F5B84F6E346205DFCBB426850F4AD5187547C1F2787897CB309FE365BC160B06DE2E167EFF" alt="">   </p></li><li><h2 id="大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。"><a href="#大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。" class="headerlink" title="大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。"></a>大致如此就完成了qb的安装，之后可以拖入测试文件测试一下下载速度。</h2><h2 id="一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。"><a href="#一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。" class="headerlink" title="一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。"></a>一般需要等待一会速度就会慢慢涨上来了。还有就是，下载的速度是取决于种子的热度的，越热门的就越多人下载，多人下载做种的人数就会越多，速度就会越快，下载完也别急着关掉，挂一会做种帮助别人下载，这样也能让资源继续传递下去（不至于“死种”）大佬的配置自动屏蔽吸血雷用户。</h2></li><li><h1 id="已经整合好放同一个文件夹了：下载链接"><a href="#已经整合好放同一个文件夹了：下载链接" class="headerlink" title="已经整合好放同一个文件夹了：下载链接"></a>已经整合好放同一个文件夹了：<a href="https://lanzous.com/ibuc6ti" target="_blank" rel="noopener">下载链接</a></h1></li><li><h2 id="我自己弄好以后的下载情况："><a href="#我自己弄好以后的下载情况：" class="headerlink" title="我自己弄好以后的下载情况："></a>我自己弄好以后的下载情况：</h2><p><img src="https://preview.cloud.189.cn/image/imageAction?param=96EC98EA8976BD02D2FC279CE73A146E170D4FFEC47A93F7872A71E152802E99D55CF6AF9803911002FAD76A92E6FD523C76FF02FD436DCD794137B3A35EA843272215AC90581116F778F6A09376D3A4FC69D1594AFAAE82093CF685" alt="">  </p><h2 id="下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m-S"><a href="#下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m-S" class="headerlink" title="下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m/S"></a>下载速度也相较于我自己瞎调的快了不少，有时甚至可以到5m/S</h2><h2 id="其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。"><a href="#其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。" class="headerlink" title="其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。"></a>其自带的搜索工具也很奈斯的，可自行尝试，时间有限就不再赘述了。</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> share </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请拒绝使用百度网盘（都5G时代了，拒绝梦回2G）</title>
      <link href="/posts/17834.html"/>
      <url>/posts/17834.html</url>
      
        <content type="html"><![CDATA[<h1 id="今天推荐一款百度网盘下载工具"><a href="#今天推荐一款百度网盘下载工具" class="headerlink" title="今天推荐一款百度网盘下载工具"></a>今天推荐一款百度网盘下载工具</h1><p>拒绝流氓从我做起  </p><ul><li><h2 id="然后是什么呢，老网盘driver应该很熟了"><a href="#然后是什么呢，老网盘driver应该很熟了" class="headerlink" title="然后是什么呢，老网盘driver应该很熟了"></a>然后是什么呢，老网盘driver应该很熟了</h2><h2 id="他就是pandownload"><a href="#他就是pandownload" class="headerlink" title="他就是pandownload"></a>他就是<a href="http://pandownload.com/" target="_blank" rel="noopener">pandownload</a></h2></li><li><h2 id="不解释看图片："><a href="#不解释看图片：" class="headerlink" title="不解释看图片："></a>不解释看图片：<img src="https://github.com/OneSidePass/photos/blob/master/%E6%89%B9%E6%B3%A8%202020-04-23%20222957.png?raw=true" alt=""></h2><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><a href="https://lanzous.com/ibucf7a" target="_blank" rel="noopener">下载地址</a></h2><h3 id="用度盘并不是自己想用，而是网上的资源都是度盘。"><a href="#用度盘并不是自己想用，而是网上的资源都是度盘。" class="headerlink" title="用度盘并不是自己想用，而是网上的资源都是度盘。"></a>用度盘并不是自己想用，而是网上的资源都是度盘。</h3>  （能跑一半带宽就已经很满足了）<br>   不然天翼云就挺不错的没像某度直接梦回2G<br><img src="https://preview.cloud.189.cn/image/imageAction?param=B3FCCEB73AA1045D7A665A6939E1D51936051F9E6BBD0C55F3D8FF7619B712021BEF0A80AE84B91F35545256C306ECE730AEB3596125CAA678AE55FCAE5A83ADAFD8DB48CAEFFACA258D792064B38828B60DEE0440D4D58EF049A3C8" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> share </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何翻越那座围墙</title>
      <link href="/posts/6309.html"/>
      <url>/posts/6309.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何翻越那座围墙"><a href="#如何翻越那座围墙" class="headerlink" title="如何翻越那座围墙"></a>如何翻越那座围墙</h1><h2 id="还在为访问不了国外的网站而感到烦恼吗，还在为登不上YouTube、Google而自己并不懂如何构建科学上网环境而放弃吗。没关系，今天就分享一个无脑白嫖全平台通用的“梯子”。（不是度盘哦下载贼快）其他平台扫码："><a href="#还在为访问不了国外的网站而感到烦恼吗，还在为登不上YouTube、Google而自己并不懂如何构建科学上网环境而放弃吗。没关系，今天就分享一个无脑白嫖全平台通用的“梯子”。（不是度盘哦下载贼快）其他平台扫码：" class="headerlink" title="还在为访问不了国外的网站而感到烦恼吗，还在为登不上YouTube、Google而自己并不懂如何构建科学上网环境而放弃吗。没关系，今天就分享一个无脑白嫖全平台通用的“梯子”。（不是度盘哦下载贼快）其他平台扫码："></a>还在为访问不了国外的网站而感到烦恼吗，还在为登不上YouTube、Google而自己并不懂如何构建科学上网环境而放弃吗。没关系，今天就分享一个无脑白嫖全平台通用的“梯子”。（不是度盘哦下载贼快）其他平台扫码：</h2><p><img src="https://github.com/OneSidePass/photos/blob/master/blog%20photo/yt.png?raw=true" alt=""></p><ul><li><p><a href="https://cloud.189.cn/t/AFjuUnIvM32e" target="_blank" rel="noopener">WINDOWS下载</a> 访问码：ufi3</p></li><li><p>其他平台扫码：</p><p> <img src="https://github.com/OneSidePass/photos/blob/master/blog%20photo/%E6%89%B9%E6%B3%A8-2020-04-18-192625.png?raw=true" alt=""></p></li></ul><ul><li><h3 id="另一款白嫖工具蓝灯：-https-lanzous-com-ibkjlvc"><a href="#另一款白嫖工具蓝灯：-https-lanzous-com-ibkjlvc" class="headerlink" title="另一款白嫖工具蓝灯： https://lanzous.com/ibkjlvc"></a>另一款白嫖工具蓝灯： <a href="https://lanzous.com/ibkjlvc" target="_blank" rel="noopener">https://lanzous.com/ibkjlvc</a></h3></li><li><h3 id="蓝灯安卓版-https-cloud-189-cn-t-iUr6vq6jai6r"><a href="#蓝灯安卓版-https-cloud-189-cn-t-iUr6vq6jai6r" class="headerlink" title="蓝灯安卓版:https://cloud.189.cn/t/iUr6vq6jai6r"></a>蓝灯安卓版:<a href="https://cloud.189.cn/t/iUr6vq6jai6r" target="_blank" rel="noopener">https://cloud.189.cn/t/iUr6vq6jai6r</a></h3>蓝灯相较于前者虽然每个月会送一些流量，轻量访问没什么问题<br>但是连接比较有问题需多次尝试</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
